# -*- mode: org -*-
#+title: My Emacs configuration file
#+author: Henrique Silva
#+email: hcpsilva@inf.ufrgs.br
#+infojs_opt:

These configurations represent my preferred version of Emacs, one that uses
=evil= everywhere it can and one that tries to be as minimalist as +I want+
possible.

Cool Emacs configs from cool people:

- [[https://github.com/caisah/emacs.dz][Lots of cool people]]
- [[https://github.com/hrs/dotfiles][hrs]] (he likes org-mode and evil)
- [[https://app-learninglab.inria.fr/gitlab/learning-lab/mooc-rr-ressources/blob/master/module2/ressources/rr_org/init.org][Konrad's and Arnaud's]]

* Table of contents                                                   :TOC_3:
- [[#introduction][Introduction]]
  - [[#what-packages-you-can-find-here][What packages you can find here]]
  - [[#use-package][=use-package=]]
    - [[#ensure][:ensure]]
    - [[#after][:after]]
    - [[#defer][:defer]]
    - [[#demand][:demand]]
    - [[#init][:init]]
    - [[#config][:config]]
- [[#the-editor][The editor]]
  - [[#definitions-and-preferences][Definitions and preferences]]
    - [[#gui-elements][GUI elements]]
    - [[#font][Font]]
    - [[#text][Text]]
    - [[#mode-line][Mode line]]
    - [[#line-numbering-and-scrolling][Line numbering and scrolling]]
    - [[#randoms][Randoms]]
  - [[#extensions][Extensions]]
    - [[#package-loading][Package loading]]
    - [[#file-management][File management]]
    - [[#environment-variables][Environment variables]]
    - [[#find-and-replace][Find and replace]]
    - [[#mode-line-1][Mode line]]
    - [[#remote-editing][Remote editing]]
    - [[#completion][Completion]]
    - [[#keybindings][Keybindings]]
    - [[#buffers-and-windows][Buffers and windows]]
    - [[#templates-and-snippets][Templates and snippets]]
    - [[#folding][Folding]]
    - [[#syntax-checking][Syntax Checking]]
    - [[#project-management][Project management]]
    - [[#regions-and-pointers][Regions and pointers]]
    - [[#indentation][Indentation]]
    - [[#utilities][Utilities]]
  - [[#theme][Theme]]
- [[#languages][Languages]]
  - [[#org][Org]]
  - [[#cc][C/C++]]
  - [[#r][R]]
  - [[#shell][Shell]]
  - [[#makefile][Makefile]]
  - [[#plantuml][PlantUML]]
  - [[#lisp][Lisp]]
  - [[#english][English]]
  - [[#python][Python]]
  - [[#cmake][CMake]]
  - [[#dockerfile][Dockerfile]]
  - [[#gmpl][GMPL]]
  - [[#julia][Julia]]
  - [[#jupyter][Jupyter]]
  - [[#latex][LaTeX]]
  - [[#coq][Coq]]
- [[#personal][Personal]]
  - [[#functions][Functions]]
    - [[#date][Date]]
  - [[#keybindings-1][Keybindings]]

* Introduction

First of all, welcome to my configuration file for Emacs. I built it from almost
the ground up, picking up configs from several sources, some of which I've cited
in the beginning of this file.

As I'd like that this file be used as a source of inspiration for others, I
wrote it in an =.org= file, using all of =org-mode='s black magic powers of
tangling source blocks to intertwine both source =.el= and prose.

Also, I've used in almost all sections of this document a package called
=use-package= in order to organize all the additional packages that I use to get
a better Emacs experience. So, I'll teach you to read a =use-package= statement!
That way you can understand what's happening beneath all sugar syntax.

** What packages you can find here

You can find the following packages in this configuration file:

#+begin_src emacs-lisp :exports results :results value org list
(shell-command-to-string
 "grep '^(use-package\ .*$' < config.el |
  awk '{print $2}' |
  tr -d ')' |
  sort")
#+end_src

#+RESULTS:
#+begin_src org
- aggressive-indent
- anzu
- auctex
- auctex-latexmk
- auto-compile
- bash-completion
- bind-key
- clang-format
- cmake-font-lock
- cmake-ide
- company
- counsel
- counsel-projectile
- counsel-tramp
- cpputils-cmake
- deadgrep
- dockerfile-mode
- dumb-jump
- elpy
- engine-mode
- ess-julia-mode
- ess-r-mode
- evil
- evil-collection
- evil-matchit
- evil-mc
- evil-org
- evil-surround
- evil-visualstar
- exec-path-from-shell
- expand-region
- flycheck
- general
- gmpl-mode
- gruvbox-theme
- helpful
- highlight-indent-guides
- hydra
- irony
- ivy
- jupyter
- midnight
- minions
- modern-cpp-font-lock
- mw-thesaurus
- neotree
- no-littering
- openwith
- org
- org-journal
- perspective
- plantuml-mode
- projectile
- ranger
- rtags
- sh-script
- smart-mode-line
- tramp
- use-package-ensure-system-package
- vimish-fold
- windmove
- yasnippet
#+end_src

** =use-package=

Briefly, this package wraps your configuration for a given package in a neat
little statement, which can include several useful categorizations and
sub-tools.

Here are all little keywords you can use to organize your configs:

*** :ensure

The =:ensure= keyword tells to =use-package= that this package should be
installed in the system. Without it, =use-package= will tell you that the given
package isn't installed and won't proceed.

I define a flag to tell =use-package= to activate this keyword by default,
because I want all packages that I use installed in the system! Still, I can
turn off this behaviour if I set the keyword to =false=.

#+begin_src emacs-lisp
(use-package foo
  :ensure t)      ; I need this package installed!

(use-package foo
  :ensure f)      ; I don't NEED the package installed
#+end_src

You can also use this keyword to tell that your package need another installed
before it loads!

#+begin_src emacs-lisp
  (use-package foo
    :ensure bar)
#+end_src

*** :after

The =:after= keyword sets a relation of dependency between the loading of two
packages. In other words, you can tell =use-package= that a given package should
only be loaded if that other package is already loaded.

#+begin_src emacs-lisp
(use-package foo)

(use-package bar
  :after foo)

(use-package moo
  :after (foo bar))    ; Supports mmultiple dependencies!
#+end_src

*** :defer

The =:defer= keyword tells =use-package= that it can defer the loading of your
package until its absolutely needed. Its behaviour is the opposite of the
keyword =:demand=.

#+begin_src emacs-lisp
(use-package foo
  :defer t)
#+end_src

*** :demand

The =:demand= keyword says to =use-package= that this package must not be
lazy-loaded, and should be loaded right away as Emacs loads.

#+begin_src emacs-lisp
(use-package foo
  :demand)
#+end_src

*** :init

The =:init= keyword can tell =use-package= to execute said commands *BEFORE* the
package is loaded. In reality, said execution will happen as soon as the
=use-package= statement is processed on the Emacs loading process.

#+begin_src emacs-lisp
(use-package foo
  :init
  (setq bar t))
#+end_src

*** :config

The =:config= keyword, much like the =:init= keyword, tells =use-package= to
execute commands. The difference is that commands defined with this keyword will
only execute *AFTER* the package is loaded. There is an important difference
here, as =use-package= uses what's called /lazy loading/, i.e. only load the
package when you actually need it.

#+begin_src emacs-lisp
(use-package foo
  :config
  (foo-init))
#+end_src

* The editor

Everything related to Emacs as the editor and platform.

** Definitions and preferences

Defaults that are better if defined /other/ way.

*** GUI elements

Almost every GUI element of Emacs is useless and a waste of screen space.

#+begin_src emacs-lisp :tangle yes
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))

(defun hcps/disable-scroll-bars (frame)
  (modify-frame-parameters frame
                           '((vertical-scroll-bars . nil)
                             (horizontal-scroll-bars . nil))))
(add-hook 'after-make-frame-functions 'hcps/disable-scroll-bars)

(setq-default inhibit-startup-screen t
              initial-scratch-message ""
              initial-major-mode 'org-mode)
#+end_src

*** Font

I use the =Source Code Pro= font in every editor I can set that on. Here's their
[[https://github.com/adobe-fonts/source-code-pro][GitHub]].

#+begin_src emacs-lisp :tangle yes
(setq-default default-frame-alist '((font . "Source Code Pro-12")))
#+end_src

*** Text

Here's every other setting relating to text editing I can't categorize any
further.

#+begin_src emacs-lisp :tangle yes
(setq-default fill-column 80
              indent-tabs-mode nil
              tab-width 4
              line-spacing 0
              require-final-newline t
              x-stretch-cursor t
              cursor-in-non-selected-windows t)

(blink-cursor-mode 0)
#+end_src

Also, =auto-fill-mode= is very useful to justify paragraphs automatically while
writing.

#+begin_src emacs-lisp :tangle yes
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

*** Mode line

Here's everything related to the mode-line.

#+begin_src emacs-lisp :tangle yes
(setq-default display-time-format "%H:%M "
              display-time-default-load-average nil)

(display-time-mode 1)
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)
#+end_src

*** Line numbering and scrolling

I like the vim style of relative numbering of lines.

#+begin_src emacs-lisp :tangle yes
(setq-default display-line-numbers-type 'relative
              display-line-numbers-width-start 4)

(global-display-line-numbers-mode)
#+end_src

And I also like the vim style of scrolling better.

#+begin_src emacs-lisp :tangle yes
(setq-default auto-window-vscroll nil
              scroll-step 1
              scroll-conservatively most-positive-fixnum
              scroll-margin 10)
#+end_src

Highlighting the current line is also very useful.

#+begin_src emacs-lisp :tangle yes
(global-hl-line-mode 1)
#+end_src

*** Randoms

Random configs and definitions that don't have a clear category.

#+begin_src emacs-lisp :tangle yes
(setq-default ad-redefinition-action 'accept       ; Silence warnings for redefinition
              confirm-kill-emacs 'yes-or-no-p      ; Confirm before exiting Emacs
              select-enable-clipboard t            ; Merge system's and Emacs' clipboard
              uniquify-buffer-name-style 'forward  ; Uniquify buffer names
              window-combination-resize t          ; Resize windows proportionally
              ring-bell-function 'ignore)          ; No bell ring

; Replace yes/no prompts with y/n
(fset 'yes-or-no-p 'y-or-n-p)

; Set Emacs to call the garbage collector on focus-out
(add-hook 'focus-out-hook #'garbage-collect)
#+end_src

** Extensions

These are Emacs-behaviour related! In other words, these extend the capabilities
of Emacs as an editor, and do NOT add support to other languages or etc.

I still need to add:

- [X] ranger
- [X] neotree
- [X] smart-mode-line
- [X] helpful
- [X] gruvbox
- [X] minions
- [X] dumb-jump
- [X] smex
- [X] ivy and counsel
- [X] counsel-tramp
- [X] tramp
- [X] autofill
- [X] engine-mode
- [X] no-littering
- [X] perspective
- [X] evil-mc
- [X] evil-collection
- [X] evil-nerd-commenter
- [X] evil-matchit
- [X] evil-leader
- [X] pdf-tools
- [X] exec-path-from-shell
- [X] anzu

Also, =prelude= packages that I like and still need to add:

- [ ] smartparens
- [ ] which-key
- [X] projectile
- [ ] magit and additionals
- [ ] flyspell (with aspell)
- [ ] undo-tree
- [ ] compile
- [ ] whitespace
- [ ] beacon
- [ ] switch-window
- [ ] rainbow-delimiters
- [ ] browse-kill-ring
- [ ] uniquify
- [ ] recentf
- [ ] supersave
- [ ] eval-expr

*** Package loading

I use =use-package= to load my packages and to organize them neatly in this org
file. I plan to gradually rip everything I want from =prelude= and put it here
eventually, using =use-package=.

#+begin_src emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

In order to demand that certain system packages are installed, I use the helper
package called =use-package-ensure-system-package=. Installing it I can use the
=:ensure-system-package= keywords and demand that certain packages are installed
in the system before proceeding (useful to LaTeX, for example)!

#+begin_src emacs-lisp :tangle yes
(use-package use-package-ensure-system-package)
#+end_src

As we'll use the =:bind= and variants in our =use-package= statements, we'll
have to demand the =bind-key= package.

#+begin_src emacs-lisp :tangle yes
(use-package bind-key)
#+end_src

Having that said, I too use =auto-compile= to always compile packages and to
have their newest version.

#+begin_src emacs-lisp :tangle yes
(use-package auto-compile
  :disabled
  :custom
  (load-prefer-newer t)
  :config
  (auto-compile-on-load-mode))
#+end_src

To add facilitate my keybinding issues, I also use =general.el=. It adds some
very welcome keywords to =use-package=, in which I'll use extensively throughout
this file.

#+begin_src emacs-lisp :tangle yes
(use-package general
  :demand)
#+end_src

*** File management

I use =ranger.el= to use a file explorer like =ranger= inside Emacs instead of
the default =dired=.

#+begin_src emacs-lisp :tangle yes
(use-package ranger
  :custom
  (ranger-cleanup-on-disable t)
  (ranger-preview-file t)
  (ranger-dont-show-binary t)
  (ranger-max-preview-size 10)
  :config
  (ranger-override-dired-mode t))
#+end_src

Also, I like to use =neotree.el= to navigate my project files, which is a clone
from =neotree= from vim.

#+begin_src emacs-lisp :tangle yes
(use-package neotree
  :general
  ("<f8>" 'neotree-toggle))
#+end_src

*** Environment variables

To ensure that Emacs uses the same path and environment as =shell= uses, I use
=exec-path-from-shell=. That way commands that work on the =shell= will
certainly work on Emacs!

#+begin_src emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :if
  (memq window-system '(mac ns))
  :demand
  :custom
  (exec-path-from-shell-arguments '("-l"))
  :config
  (exec-path-from-shell-initialize))
#+end_src

And the loading of the =ssh= environment...

#+begin_src emacs-lisp :tangle yes
(defun hcps/get-ssh-env (_)
  (and (exec-path-from-shell-copy-env "SSH_AGENT_PID")
       (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")))

(add-hook 'after-make-frame-functions 'hcps/get-ssh-env)
#+end_src

*** Find and replace

Besides the =ISearch= from Emacs itself or the search function from =evil=, I
also like to use =anzu=.

#+begin_src emacs-lisp :tangle yes
(use-package anzu
  :custom
  (anzu-cons-mode-line nil)
  :config
  (global-anzu-mode 1))
#+end_src

I use only the =anzu-replace-at-cursor-thing=, which is a very useful to replace
multiple occurrences of a word fast.

Besides that, I enjoy using =ripgrep= to search for stuff using =grep= syntax
without the slowness of it. So, I use =deadgrep=!

#+begin_src emacs-lisp :tangle yes
(use-package deadgrep
  :config
  (evil-collection-deadgrep-setup))
#+end_src

*** Mode line

I use =smart-mode-line= as it is very minimalist and informative (and it looks
very pretty on =gruvbox=).

#+begin_src emacs-lisp :tangle yes
(use-package smart-mode-line
  :demand
  :config
  (sml/setup))
#+end_src

Also, =minions= is useful to not show those pesky minor-modes all the time. No
one wanna see what minor modes are active ALL of the time, right?

#+begin_src emacs-lisp :tangle yes
(use-package minions
  :after smart-mode-line
  :custom
  (minions-mode-line-lighter "...")
  (minions-mode-line-delimiters '("" . ""))
  :config
  (add-to-list 'minions-whitelist '(projectile-mode . t))
  (minions-mode 1))
#+end_src

*** Remote editing

=tramp=, which is included by default in Emacs, is very useful when it comes to
editing remote files and to editing as super-user.

#+begin_src emacs-lisp :tangle yes
(use-package tramp
  :demand
  :custom
  (tramp-default-method "ssh"))
#+end_src

*** Completion

This section comprises of both text completion and fuzzy command and path
completion.

**** Path and command

=ivy= is like =ido= but better, I guess. It does fuzzy matching of searches to
open files and such. =flx= is required here in order to have fuzzy matching and
whatnot.

#+begin_src emacs-lisp :tangle yes
(use-package ivy
  :ensure flx
  :demand
  :preface
  (defun hcps/ivy-open-current-typed-path ()
    (interactive)
    (when ivy--directory
      (let* ((dir ivy--directory)
             (text-typed ivy-text)
             (path (concat dir text-typed)))
        (delete-minibuffer-contents)
        (ivy--done path))))
  :custom
  (ivy-count-format "(%d/%d) ")
  (ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
  :general
  ("C-x b" 'ivy-switch-buffer)
  (:keymaps 'ivy-minibuffer-map
   "RET" 'ivy-alt-done
   "C-f" 'hcps/ivy-open-current-typed-path)
  :config
  (ivy-mode 1))
#+end_src

=counsel= uses =ivy= to find files and commands. =smex= is required here to
make sure that =counsel-M-x= has decent candidate sorting.

#+begin_src emacs-lisp :tangle yes
(use-package counsel
  :ensure smex
  :after ivy
  :demand
  :general
  ("M-x" 'counsel-M-x)
  ("C-x C-f" 'counsel-find-file)
  ("C-x r b" 'counsel-bookmark))
#+end_src

As you may know, in Emacs we use =tramp= to edit files remotely using =ssh= and
to edit local files as =root=. With the package =counsel-tramp= we have an
=counsel=-powered interface to use that mechanism!

This package looks up your hosts defined in =~/.ssh/config= to generate a list
with possible =ssh= connections AND docker containers (thanks to
=docker-tramp=), along with =sudo= possibilities (including =localhost=!).

#+begin_src emacs-lisp :tangle yes
(use-package counsel-tramp
  :ensure docker-tramp
  :after counsel
  :general
  ("C-c C-f" 'counsel-tramp))
#+end_src

**** Text

I use =company= as my completion framework. In the words of Dmitry Gutov:

#+BEGIN_QUOTE
Company is a text completion framework for Emacs. The name stands for "complete
anything". It uses pluggable back-ends and front-ends to retrieve and display
completion candidates.

[[http://company-mode.github.io/][Dmitry Gutov]]
#+END_QUOTE

#+begin_src emacs-lisp :tangle yes
(use-package company
  :general
  (:keymaps 'company-active-map
   "TAB" 'company-complete-selection
   "<right>" 'company-complete-common)
  :custom
  (company-idle-delay .2)
  (company-minimum-prefix-length 1)
  (company-require-match nil)
  (company-tooltip-align-annotations t)
  :config
  (global-company-mode 1))
#+end_src

*** Keybindings

These packages change keybindings and the default editing modes of Emacs.

**** Evil

=evil=, or /Extensible vi Layer/, is a minor mode that changes Emacs text
editing keybindings to match the modal edit modes of vi and vim. Yes, you can
have the best of both worlds!

#+begin_src emacs-lisp :tangle yes
(use-package evil
  :demand
  :preface
  (defun hcps/yank-to-eol ()
    "Yank to the EOL."
    (interactive)
    (evil-yank (point) (point-at-eol)))
  (defun hcps/shift-left-region ()
    "Shift left and restore visual selection."
    (interactive)
    (evil-shift-left (region-beginning) (region-end))
    (evil-normal-state)
    (evil-visual-restore))
  (defun hcps/shift-right-region ()
    "Shift right and restore visual selection."
    (interactive)
    (evil-shift-right (region-beginning) (region-end))
    (evil-normal-state)
    (evil-visual-restore))
  :init
  (defconst hcps/leader-key "SPC")
  :general
  (:states '(normal visual)
   :prefix hcps/leader-key
   ""  nil
   "f" 'counsel-find-file
   "b" 'ivy-switch-buffer
   "k" 'kill-this-buffer
   "K" 'kill-buffer
   "r" 'counsel-recentf
   "t" 'counsel-tramp
   "s" 'save-buffer
   "d" 'ranger
   "w" 'delete-window
   "g" 'magit-status
   "o" 'ace-window
   "y" 'counsel-yank-pop
   "ESC" 'evil-mc-undo-all-cursors
   ;; misc bindings under 'm'
   "m c" 'comment-dwim
   "m i" 'indent-region
   "m g" 'deadgrep
   "m b" 'counsel-bookmark
   "m r" 'anzu-replace-at-cursor-thing
   "m j" 'org-journal-new-entry
   ;; projectile binding under 'p'
   "p p" 'counsel-projectile-switch-project
   "p f" 'counsel-projectile-find-file
   "p c" 'projectile-compile-project
   "p g" 'counsel-projectile-rg)
  (:states '(normal visual)
   "C-u" 'evil-scroll-up
   "C-d" 'evil-scroll-down
   "C-S-h" 'previous-buffer
   "C-S-l" 'next-buffer)
  (:states 'insert
   "<tab>" 'indent-for-tab-command)
  (:states 'normal
   "Y" 'hcps/yank-to-eol)
  (:states 'visual
   ">" 'hcps/shift-right-region
   "<" 'hcps/shift-left-region)
  :custom
  (evil-esc-delay 0)
  (evil-shift-width 2)
  (evil-want-keybinding nil)
  (evil-emacs-state-cursor  '("red" box))
  (evil-normal-state-cursor '("gray" box))
  (evil-visual-state-cursor '("gray" hollow))
  (evil-insert-state-cursor '("gray" bar))
  (evil-motion-state-cursor '("gray" hbar))
  (evil-mode-line-format 'before)
  :config
  (evil-mode 1))
#+end_src

Now, you may be asking yourself "why are you defining some of the keybindings
here under evil and other in their respective packages?". That's a great
question! My intention was to define everything =evil= and global here, maybe
some of it got scattered around the rest of the config files, but I'm slowly
collecting these occurrences.

Also I use =evil-surround=, which is a port of =surround= from vim and allow you
to quickly delete or change surrounding ="= and ='= from words or paragraphs or
whatever, as it integrates with vim's verb way of expressing actions.

#+begin_src emacs-lisp :tangle yes
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src

=evil-org= adds a lot of useful keybindings to =org-mode=. I'm still not aware
of how much this adds or how similar they are to =prelude='s keys to org on
=evil=.

#+begin_src emacs-lisp :tangle yes
(use-package evil-org
  :disabled
  :after (org evil)
  :hook
  ((org-mode . evil-org-mode)
   (evil-org-mode . (lambda () (evil-org-set-key-theme))))
  :config
  (evil-org-agenda-set-keys))
#+end_src

=evil-visualstar= enables searching visual selections with the =*= key.

#+begin_src emacs-lisp :tangle yes
(use-package evil-visualstar
  :after evil)
#+end_src

The package =evil-collection= adds a bunch of cool =evil= keybindings to other
popular packages.

#+begin_src emacs-lisp :tangle yes
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

=evil-mc= implements the =multiple-cursors= functionality to =evil-mode=.

#+begin_src emacs-lisp :tangle yes
(use-package evil-mc
  :after evil
  :general
  (:states 'visual
   "A" 'evil-mc-make-cursor-in-visual-selection-end
   "I" 'evil-mc-make-cursor-in-visual-selection-beg)
  :config
  (global-evil-mc-mode 1))
#+end_src

=evil-matchit= allows you to jump between tags automatically!

#+begin_src emacs-lisp :tangle yes
(use-package evil-matchit
  :after evil
  :custom
  (evilmi-may-jump-by-percentage nil)
  :config
  (global-evil-matchit-mode 1))
#+end_src

**** Hydra

=hydra= is a package that allows keybindings to be activated under the pressing
of a specific combination of keys. These will then be active as long as only
them are being pressed, as on the moment a key which isn't part of the hydra is
pressed the hydra is killed and the keybindings deactivated.

#+begin_src emacs-lisp :tangle yes
(use-package hydra
  :preface
  (defvar-local me/ongoing-hydra-body nil)
  (defun me/ongoing-hydra ()
    (interactive)
    (if me/ongoing-hydra-body
        (funcall me/ongoing-hydra-body)
      (user-error "me/ongoing-hydra: me/ongoing-hydra-body is not set")))
  :general
  ("C-c e" 'hydra-eyebrowse/body)
  ("C-c f" 'hydra-flycheck/body)
  :custom
  (hydra-default-hint nil))
#+end_src

***** Eyebrowse

 #+begin_src emacs-lisp
 (defhydra hydra-eyebrowse (:color blue)
   "
 ^
 ^Eyebrowse^         ^Do^                ^Switch^
 ^─────────^─────────^──^────────────────^──────^────────────
 _q_ quit            _c_ create          _<_ previous
 ^^                  _k_ kill            _>_ next
 ^^                  _r_ rename          _e_ last
 ^^                  ^^                  _s_ switch
 ^^                  ^^                  ^^
 "
   ("q" nil)
   ("<" eyebrowse-prev-window-config :color red)
   (">" eyebrowse-next-window-config :color red)
   ("c" eyebrowse-create-window-config)
   ("e" eyebrowse-last-window-config)
   ("k" eyebrowse-close-window-config :color red)
   ("r" eyebrowse-rename-window-config)
   ("s" eyebrowse-switch-to-window-config))
 #+end_src

***** Flycheck

 #+begin_src emacs-lisp
 (defhydra hydra-flycheck (:color pink)
   "
 ^
 ^Flycheck^          ^Errors^            ^Checker^
 ^────────^──────────^──────^────────────^───────^───────────
 _q_ quit            _<_ previous        _?_ describe
 _m_ manual          _>_ next            _d_ disable
 _v_ verify setup    _f_ check           _s_ select
 ^^                  _l_ list            ^^
 ^^                  ^^                  ^^
 "
   ("q" nil)
   ("<" flycheck-previous-error)
   (">" flycheck-next-error)
   ("?" flycheck-describe-checker :color blue)
   ("d" flycheck-disable-checker :color blue)
   ("f" flycheck-buffer)
   ("l" flycheck-list-errors :color blue)
   ("m" flycheck-manual :color blue)
   ("s" flycheck-select-checker :color blue)
   ("v" flycheck-verify-setup :color blue))
 #+end_src

*** Buffers and windows

- *TODO*: make a hydra to change buffers like tabs (=h= goes to previous buffer,
  =l= to the next)

=windmove= is a package that creates commands to move around windows.

#+begin_src emacs-lisp
(use-package windmove
  :general
  ("C-M-<left>" 'windmove-left)
  ("C-M-<right>" 'windmove-right)
  ("C-M-<up>" 'windmove-up)
  ("C-M-<down>" 'windmove-down))
#+end_src

Originally, =midnight= is used to /run something at midnight/. I use its feature
that kills old buffers.

#+begin_src emacs-lisp
(use-package midnight
  :custom
  (clean-buffer-list-delay-general 0.5)
  (clean-buffer-list-delay-special (* 1 3600))
  (clean-buffer-list-kill-buffer-names
   (nconc clean-buffer-list-kill-buffer-names "*IBuffer*" "*Finder*")))
#+end_src

Also, I use perspective to maintain multiple workspaces open with different
buffers in each.

#+begin_src emacs-lisp :tangle yes
(use-package perspective
  :config
  (persp-mode))
#+end_src

*** Templates and snippets

I use =yasnippet= to handle my snippet needs.

#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :demand
  :init
  (add-to-list 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
  :general
  (:keymaps 'yas-minor-mode-map
   :states 'insert
   "<tab>" yas-maybe-expand)
  :custom
  (yas-snippet-dirs '("~/.emacs.d/snippets"))
  :hook
  ((emacs-lisp-mode . yas-minor-mode)
   (html-mode . yas-minor-mode)
   (org-mode . yas-minor-mode)
   (tex-mode . yas-minor-mode))
  :config
  (yas-reload-all))
#+end_src

*** Folding

Enables vim-like folding of regions.

#+begin_src emacs-lisp
(use-package vimish-fold
  :general
  (:keymaps 'vimish-fold-folded-keymap
   "C-<tab>" 'vimish-fold-unfold)
  (:keymaps 'vimish-fold-unfolded-keymap
   "C-<tab>" 'vimish-fold-refold)
  :custom
  (vimish-fold-dir (expand-file-name ".vimish-fold/" user-emacs-directory))
  (vimish-fold-header-width 79)
  :config
  (vimish-fold-global-mode 1))
#+end_src

*** Syntax Checking

=Flycheck= provides a reliable source to syntax checking in Emacs.

#+begin_src emacs-lisp
(use-package flycheck
  :demand
  :init (global-flycheck-mode)
  :custom
  (flycheck-check-syntax-automatically '(save mode-enabled))
  (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
  (flycheck-display-errors-delay .3)
  :config
  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message) line-end))
    :modes (text-mode markdown-mode gfm-mode org-mode))
  (add-to-list 'flycheck-checkers 'proselint))
#+end_src

*** Project management

For project management in Emacs, there's no better choice than =projectile=,
which is widely loved by the community.

It supports project-wide commands and actions, like killing all project buffers
or searching the whole project and replacing something.

#+begin_src emacs-lisp :tangle yes
(use-package projectile
  :custom
  (projectile-completion-system 'ivy)
  (projectile-switch-project-action 'neotree-projectile-action)
  :general
  ("s-p" '(:keymap projectile-command-map :package projectile))
  :config
  (projectile-global-mode))
#+end_src

And, as a further integration of =ivy= and =projectile=, there is a package that
makes actions such as =switch-project= to use =counsel='s completion and
ordering of results.

#+begin_src emacs-lisp :tangle yes
(use-package counsel-projectile
  :after (projectile counsel)
  :config
  (counsel-projectile-mode))
#+end_src

*** Regions and pointers

Increase region by semantic units. It tries to be smart about it and adapt to
the structure of the current major mode.

#+begin_src emacs-lisp
(use-package expand-region
  :general
  ("C-+" 'er/contract-region)
  ("C-=" 'er/expand-region))
#+end_src

*** Indentation

I use =aggressive-indent= to keep my code indented as I type.

#+begin_src emacs-lisp
(use-package aggressive-indent
  :preface
  (defun me/aggressive-indent-mode-off ()
    (aggressive-indent-mode 0))
  :hook
  ((emacs-lisp-mode . aggressive-indent-mode)
   (lisp-mode . aggressive-indent-mode)
   (c-mode-common-hook . aggressive-indent-mode))
  :custom
  (aggressive-indent-comments-too t)
  :config
  (add-to-list 'aggressive-indent-protected-commands 'comment-dwim))
#+end_src

Also =highligh-indent-guides= is very useful, as Emacs doesn't come with it out
of the box.

#+begin_src emacs-lisp :tangle yes
(use-package highlight-indent-guides
  :demand
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-responsive 'stack)
  (highlight-indent-guides-delay 0.05)
  (highlight-indent-guides-auto-odd-face-perc 15)
  (highlight-indent-guides-auto-even-face-perc 15)
  (highlight-indent-guides-auto-character-face-perc 20)
  :hook
  (prog-mode-hook . highlight-indent-guides-mode))
#+end_src

*** Utilities

Random utilities that don't fit anywhere else.

**** =helpful=

=helpful= is a package that is overall an improvement over the default =help=
windows.

#+begin_src emacs-lisp :tangle yes
(use-package helpful
  :general
  ("C-h f" 'helpful-callable)
  ("C-h v" 'helpful-variable)
  ("C-h k" 'helpful-key))
#+end_src

**** =dumb-jump=

=dumb-jump= is a package that allows you to jump to definition with minimal
setup (i.e. no TAG or RTAGS or etc.).

#+begin_src emacs-lisp :tangle yes
(use-package dumb-jump
  :general
  ("M-g o" 'dumb-jump-go-other-window)
  ("M-g j" 'dumb-jump-go))
#+end_src

**** =engine-mode=

=engine-mode= is a minor mode that allow you to easily make queries to the web
without leaving Emacs.

#+begin_src emacs-lisp :tangle yes
(use-package engine-mode
  :config
  (defengine google
    "https://www.google.com/search?q="
    :keybinding "g")
  (engine-mode t))
#+end_src

**** =no-littering=

=no-littering= is a package that helps to maintain your =.emacs.d/= clean.

#+begin_src emacs-lisp :tangle yes
(use-package no-littering
  :demand)
#+end_src

**** =openwith=

=openwith= is a small and useful tool to set how you want to open your files
with Emacs. I use it to set the opener of pdfs in my Emacs, as well to other
diverse media files.

#+begin_src emacs-lisp :tangle yes
(use-package openwith
  :demand
  :custom
  (openwith-associations
   '(("\\.pdf\\'" "zathura" (file))
     ("\\.jpg\\'" "sxiv" (file))
     ("\\.svg\\'" "sxiv" (file))
     ("\\.jpeg\\'" "sxiv" (file))
     ("\\.bmp\\'" "sxiv" (file))
     ("\\.flac\\'" "mpv" (file))
     ("\\.mkv\\'" "mpv" (file))
     ("\\.mp3\\'" "mpv" (file))
     ("\\.mp4\\'" "mpv" (file))))
  :config
  (openwith-mode t))
#+end_src

** Theme

Here I define the theme that I use, which is =gruvbox=, as it provides nice
support for a lot of packages and is very pleasant for the eyes.

#+begin_src emacs-lisp :tangle yes
(use-package gruvbox-theme
  :demand
  :config
  (load-theme 'gruvbox-dark-medium t))
#+end_src

* Languages

Here I'll store any package load and configurations related to languages.

I still need to add packages relating to these languages:

- [X] Org
- [X] C/C++
- [X] Python
- [ ] Scala
- [X] LaTeX (use-package-ensure-system-package texlive-most)
- [X] R
- [X] Shell
- [X] Makefile
- [ ] Dot (using Graphviz)
- [ ] Lisp (duh)
- [X] PlantUML
- [ ] English (as in literal english)
- [X] CMake
- [X] Dockerfile
- [X] GMPL
- [X] Julia
- [X] Jupyter
- [ ] Coq (yes, I'm slowly turning into what I most hate)

** Org

=org-mode= is probably *the* killer mode and one of the main reasons as to why
anyone should try Emacs. With it I also use =toc-org=, which is an useful way to
automatically maintain an updated table of contents of your =.org= file.

#+begin_src emacs-lisp :tangle yes :results output
(use-package org
  :mode (("\\.org\\'" . org-mode))
  :ensure org-plus-contrib
  :ensure toc-org
  :ensure ob-async
  :preface
  (defun org-export-output-file-name-modified (orig-fun extension &optional subtreep pub-dir)
    (unless pub-dir
      (setq pub-dir "org-exports")
      (unless (file-directory-p pub-dir)
        (make-directory pub-dir)))
    (apply orig-fun extension subtreep pub-dir nil))
  (defun org-babel-tangle-block ()
    (interactive)
    (let ((current-prefix-arg '(4)))
      (call-interactively 'org-babel-tangle)))
  :init
  (advice-add 'org-export-output-file-name :around #'org-export-output-file-name-modified)
  :hook
  ((org-mode . org-indent-mode)
   (org-mode . toc-org-mode)
   (org-mode . turn-on-auto-fill)
   (org-mode . (lambda () (ox-extras-activate '(ignore-headlines))))
   (org-babel-after-execute . org-redisplay-inline-images)
   (ob-async-pre-execute-src-block . (lambda ()
                                       (setq inferior-julia-program-name "/usr/bin/julia"))))
  :custom
  (org-return-follows-link t)
  (org-highlight-latex-and-related '(latex script entities))
  (org-hide-leading-stars t)
  (org-support-shift-select nil)
  (org-log-done t)
  (org-directory "~/org/")
  (org-cycle-emulate-tab nil)
  (org-edit-src-content-indentation 0)
  (org-edit-src-persistent-message nil)
  (org-src-preserve-identation t)
  (org-src-fontify-natively t)
  (org-modules (append org-modules '(org-tempo ox-extra)))
  (org-export-allow-bind-keywords t)
  (org-export-with-latex t)
  (org-export-babel-evaluate t)
  (org-latex-image-default-width "1\\linewidth")
  (org-latex-packages-alist
   '(("cache=false,outputdir=org-exports" "minted")
     ("T1" "fontenc")
     ("utf8" "inputenx")
     ("" "placeins")))
  (org-latex-listings 'minted)
  (org-latex-minted-options
   '(("breaklines")
     ("breakafter" "d")
     ("linenos" "true")
     ("xleftmargin" "\\parindent")))
  (org-latex-pdf-process
   '("latexmk -pdflatex='pdflatex -shell-escape -interaction=nonstopmode' -f -pdf -outdir=%o %f"))
  (org-babel-default-header-args
   '((:async . "yes")
     (:session . "none")
     (:results . "value replace")
     (:exports . "code")
     (:cache . "none")
     (:noweb . "no")
     (:hlines . "no")
     (:tangle . "no")))
  (org-babel-default-header-args:jupyter-julia
   '((:eval . "no-export")
     (:exports . "both")
     (:kernel . "julia-1.2")))
  (org-babel-default-header-args:jupyter-python
   '((:eval . "no-export")
     (:exports . "both")
     (:kernel . "python3")))
  (ob-async-no-async-languages-alist
   '("ipython" "jupyter-julia" "jupyter-python"))
  :general
  (:states '(normal visual)
   :keymaps 'org-mode-map
   "C-S-k" 'outline-up-heading
   "C-k" 'outline-previous-visible-heading
   "C-j" 'outline-next-visible-heading
   "t" 'org-todo ; mark a TODO item as DONE
   "<tab>" 'outline-toggle-children
   "<backtab>" 'org-global-cycle
   "<return>" 'org-open-at-point
   "$" 'org-end-of-line ; smarter behaviour on headlines etc.
   "0" 'org-beginning-of-line ; ditto
   "-" 'org-ctrl-c-minus ; change bullet style
   "<" 'org-metaleft ; outdent
   ">" 'org-metaright) ; indent
  (:states '(normal visual)
   :keymaps 'org-mode-map
   :prefix hcps/leader-key
   "c" 'org-cycle
   "e" 'org-export-dispatch
   "x" 'org-babel-execute-buffer
   "q" 'org-set-tags-command
   "a" 'org-attach
   "z" 'org-babel-tangle-block
   "Z" 'org-babel-tangle
   "i" 'org-toggle-inline-images)
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (python . t)
     (makefile . t)
     (R . t)
     (C . t)
     (ruby . t)
     (ditaa . t)
     (dot . t)
     (octave . t)
     (sqlite . t)
     (perl . t)
     (screen . t)
     (plantuml . t)
     (julia . t)
     (latex . t)
     (jupyter . t)
     (lilypond . t))))
#+end_src

And here I'll put some LaTeX classes that aren't default in org:

#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-latex-classes
             '("iiufrgs"
               "\\documentclass{iiufrgs}"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")))

(add-to-list 'org-latex-classes
             '("newlfm"
               "\\documentclass{newlfm}"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

(add-to-list 'org-latex-classes
             '("IEEEtran"
               "\\documentclass{IEEEtran}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

=org-journal= is a powerful tool to journal your day.

#+begin_src emacs-lisp :tangle yes
(use-package org-journal
  :after org
  :custom
  (org-journal-dir (format-time-string "~/OneDrive/Documentos/Journal/%Y/"))
  (org-journal-file-format "%Y%m%d")
  (org-journal-date-format "%e %b %Y (%A)")
  (org-journal-time-format "")
  :general
  ("C-c t" 'org-journal-new-entry))
#+end_src

** C/C++

Here I set some defaults I appreciate for cc-mode.

#+begin_src emacs-lisp :tangle yes
(defun c-mode-defaults ()
  (setq c-default-style "linux"
        c-basic-offset 4)
  (c-set-offset 'substatement-open 0))

(setq c-mode-defaults-hook 'c-mode-defaults)

;; this will affect all modes derived from cc-mode, like
;; java-mode, php-mode, etc
(add-hook 'c-mode-common-hook (lambda () (run-hooks 'c-mode-defaults-hook)))
#+end_src

In a sea of C and C++ packages for Emacs, I must make a mention for =irony=.
This package makes your low-level programming life way easier.

#+begin_src emacs-lisp :tangle yes
(use-package irony
  :ensure company-irony
  :ensure company-irony-c-headers
  :ensure flycheck-irony
  :preface
  (defun hcps/irony-mode-hook ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))
  :hook
  ((c++-mode-hook . irony-mode)
   (c-mode-hook . irony-mode)
   (objc-mode-hook . irony-mode)
   (flycheck-mode-hook . flycheck-irony)
   (irony-mode-hook . irony-cdb-autosetup-compile-options)
   (irony-mode-hook . hcps/irony-mode-hook))
  :init
  (add-to-list 'company-backends '(company-irony company-irony-c-headers)))
#+end_src

Better C++ font lock:

#+begin_src emacs-lisp :tangle yes
(use-package modern-cpp-font-lock
  :config
  (modern-c++-font-lock-global-mode))
#+end_src

Also, =rtags= is a project that aims to set up tags for C and C++ projects so
other tools can use them.

#+begin_src emacs-lisp :tangle yes
(use-package rtags
  :ensure company-rtags
  :hook
  (irony-mode-hook . rtags-start-process-unless-running)
  :custom
  (rtags-display-result-backend 'ivy)
  (rtags-completions-enabled t)
  :config
  (add-to-list 'company-backends 'company-rtags)
  (rtags-enable-standard-keybindings))
#+end_src

A very useful package for C and C++ is =cmake-ide=. In CMake projects it really
shines, as it uses CMake to get completion and syntax highlighting after
compilations.

#+begin_src emacs-lisp :tangle yes
(use-package cmake-ide
  :after (irony rtags)
  :config
  (cmake-ide-setup))
#+end_src

Also, the package =cpputils-cmake= sets up syntax highlighting to a bunch of
useful packages. It goes pretty well with =cmake-ide=.

#+begin_src emacs-lisp :tangle yes
(use-package cpputils-cmake
  :hook
  (c-mode-common-hook . (lambda ()
                          (if (derived-mode-p 'c-mode 'c++-mode)
                              (cppcm-reload-all))))
  :config
  (add-to-list 'company-backends 'company-cmake))
#+end_src

In the department of code formatting, =clang-format= is a lovely tool that can
really be of great use while editing C and C++ code.

#+begin_src emacs-lisp :tangle yes
(use-package clang-format
  :ensure-system-package clang
  :preface
  (defun cc-format-on-save-hook ()
    (when c-buffer-is-cc-mode
      (clang-format-buffer)))
  :general
  (:keymaps 'c-mode-base-map
   "C-M-<tab>" 'clang-format-buffer)
  (:states '(normal visual)
   :keymaps 'c-mode-base-map
   :prefix hcps/leader-key
   "c" 'clang-format-region
   "C" 'clang-format-buffer)
  :hook
  (before-save-hook . #'cc-format-on-save-hook)
  :custom
  (clang-format-style "webkit"))
#+end_src

** R

For R you pretty much /need/ the =ess= package, i.e. /Emacs Speaks Statistics/.
It provides you with everything you need from R.

#+begin_src emacs-lisp :tangle yes
(use-package ess-r-mode
  :ensure ess
  :commands R
  :hook
  (ess-r-mode . aggressive-indent-mode)
  :preface
  (defun hcps/insert-r-pipe ()
    "Lets us insert the magrittr piping operator %>% in R"
    (interactive)
    (just-one-space 1)
    (insert "%>%")
    (reindent-then-newline-and-indent))
  :general
  (:states 'insert
   :keymaps 'ess-r-mode-map
   "M-RET" 'hcps/insert-r-pipe)
  :custom
  (ess-auto-width 'frame)
  (ess-style 'RStudio))
#+end_src

** Shell

As for shell-scripting:

#+begin_src emacs-lisp :tangle yes
(use-package sh-script
  :preface
  (defun zsh-prezto-files ()
    (if (and buffer-file-name
             (member (file-name-nondirectory buffer-file-name) prezto-files))
        (sh-set-shell "zsh")))
  :custom
  (prezto-files '("zlogin" "zlogin" "zlogout" "zpreztorc" "zprofile" "zshenv" "zshrc"))
  :hook
  (sh-mode . zsh-prezto-files)
  :config
  (sh-set-shell "bash"))
#+end_src

For =shell= completion I use =bash-complete=, which auto completes several
=bash= functions.

#+begin_src emacs-lisp :tangle yes
(use-package bash-completion
  :hook
  (shell-dynamic-complete-funtions . bash-completion-dynamic-complete))
#+end_src

** Makefile

In Makefile files we have a special case: it /needs/ tabulators to work. So,
we'll set that up.

#+begin_src emacs-lisp :tangle yes
(defun makefile-mode-defaults ()
  (whitespace-toggle-options '(tabs))
  (setq-local indent-tabs-mode t ))

(setq makefile-mode-hook 'makefile-mode-defaults)

(add-hook 'makefile-mode-hook (lambda () (run-hooks 'makefile-mode-hook)))
#+end_src

** PlantUML

/PlantUML/ is a graph language that describes loads of different diagram types,
mainly focusing on /UML/, of course.

#+begin_src emacs-lisp :tangle yes
(use-package plantuml-mode
  :mode "\\.plantuml\\'"
  :interpreter "plantuml")
#+end_src

** Lisp

Fix for the annoying keyword default indentation:

#+begin_src emacs-lisp :tangle yes
(defun fuco1/lisp-indent-function (indent-point state)
  "This function is the normal value of the variable `lisp-indent-function'.
The function `calculate-lisp-indent' calls this to determine
if the arguments of a Lisp function call should be indented specially.
INDENT-POINT is the position at which the line being indented begins.
Point is located at the point to indent under (for default indentation);
STATE is the `parse-partial-sexp' state for that position.
If the current line is in a call to a Lisp function that has a non-nil
property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
it specifies how to indent.  The property value can be:
,* `defun', meaning indent `defun'-style
  \(this is also the case if there is no property and the function
  has a name that begins with \"def\", and three or more arguments);
,* an integer N, meaning indent the first N arguments specially
  (like ordinary function arguments), and then indent any further
  arguments like a body;
,* a function to call that returns the indentation (or nil).
  `lisp-indent-function' calls this function with the same two arguments
  that it itself received.
This function returns either the indentation to use, or nil if the
Lisp function does not specify a special indentation."
  (let ((normal-indent (current-column))
        (orig-point (point)))
    (goto-char (1+ (elt state 1)))
    (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
    (cond
     ;; car of form doesn't seem to be a symbol, or is a keyword
     ((and (elt state 2)
           (or (not (looking-at "\\sw\\|\\s_"))
               (looking-at ":")))
      (if (not (> (save-excursion (forward-line 1) (point))
                  calculate-lisp-indent-last-sexp))
          (progn (goto-char calculate-lisp-indent-last-sexp)
                 (beginning-of-line)
                 (parse-partial-sexp (point)
                                     calculate-lisp-indent-last-sexp 0 t)))
      ;; Indent under the list or under the first sexp on the same
      ;; line as calculate-lisp-indent-last-sexp.  Note that first
      ;; thing on that line has to be complete sexp since we are
      ;; inside the innermost containing sexp.
      (backward-prefix-chars)
      (current-column))
     ((and (save-excursion
             (goto-char indent-point)
             (skip-syntax-forward " ")
             (not (looking-at ":")))
           (save-excursion
             (goto-char orig-point)
             (looking-at ":")))
      (save-excursion
        (goto-char (+ 2 (elt state 1)))
        (current-column)))
     (t
      (let ((function (buffer-substring (point)
                                        (progn (forward-sexp 1) (point))))
            method)
        (setq method (or (function-get (intern-soft function)
                                       'lisp-indent-function)
                         (get (intern-soft function) 'lisp-indent-hook)))
        (cond ((or (eq method 'defun)
                   (and (null method)
                        (> (length function) 3)
                        (string-match "\\`def" function)))
               (lisp-indent-defform state indent-point))
              ((integerp method)
               (lisp-indent-specform method state
                                     indent-point normal-indent))
              (method
               (funcall method indent-point state))))))))
#+end_src

and the necessary hook:

#+begin_src emacs-lisp :tangle yes
(add-hook 'emacs-lisp-mode-hook
          (lambda () (setq-local lisp-indent-function #'fuco1/lisp-indent-function)))
#+end_src

** English

Something I found out while scrolling /Github/ is the =mw-thesaurus= package,
which provides a nice interface for the Merriam-Webster thesaurus.

#+begin_src emacs-lisp :tangle yes
(use-package mw-thesaurus
  :after evil
  :general
  (:states '(normal visual)
   :prefix hcps/leader-key
   "T" 'mw-thesaurus-lookup-at-point))
#+end_src

** Python

#+begin_quote
Elpy is an Emacs package to bring powerful Python editing to Emacs. It combines
and configures a number of other packages, both written in Emacs Lisp as well as
Python.
#+end_quote

#+begin_src emacs-lisp :tangle yes
(use-package elpy
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable))
#+end_src

** CMake

Just as a bonus, this package helps me to read CMake code. As CMake is very
simple, each word carries a load of meaning and importance. This little mode
colors them accordingly.

#+begin_src emacs-lisp :tangle yes
(use-package cmake-font-lock
  :commands cmake-font-lock-activate
  :init
  (advice-add 'cmake-mode :after 'cmake-font-lock-activate))
#+end_src

** Dockerfile

=dockerfile-mode= adds support to syntax highlighting and to build the image
directly from the buffer using =C-c C-b=.

#+begin_src emacs-lisp :tangle yes
(use-package dockerfile-mode
  :ensure docker-compose-mode
  :mode "Dockerfile\\'")
#+end_src

** GMPL

So I have syntax highlighting while editing GLPK files.

#+begin_src emacs-lisp :tangle yes
(use-package gmpl-mode
  :mode "\\.mod\\'")
#+end_src

** Julia

A package to write Julia source code in Emacs.

#+begin_src emacs-lisp :tangle yes
(use-package ess-julia-mode
  :ensure ess
  :ensure julia-mode
  :mode "\\.jl\\'"
  :init
  (setq inferior-julia-program-name "/usr/bin/julia"))
#+end_src

** Jupyter

An interface to communicate with Jupyter kernels in Emacs.

#+begin_src emacs-lisp :tangle yes
(use-package jupyter
  :after org
  :ensure zmq
  :ensure websocket
  :config
  (require 'ob-jupyter))
#+end_src

** LaTeX

Let's start with some basic =auctex= editing so it starts the way I want (as
theoretically it should come bundled with Emacs).

#+begin_src emacs-lisp :tangle yes
(use-package auctex
  :ensure company-auctex
  :ensure company-reftex
  :mode (("\\.tex\\'" . latex-mode))
  :hook
  ((latex-mode . turn-on-reftex)
   (latex-mode . company-auctex-init)
   (tex-mode . turn-on-auto-fill)
   (latex-mode . turn-on-auto-fill)
   (latex-mode . rainbow-delimiters-mode))
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-save-query nil)
  (TeX-source-correlate-method 'synctex)
  (TeX-master nil)
  (reftex-plug-into-AUCTeX t)
  (reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
  :config
  (add-to-list 'company-backends 'company-math-symbols-latex)
  (add-to-list 'company-backends 'company-latex-commands))
#+end_src

So, for my LaTeX config I'll mainly use =latexmk= as it's way simpler to use.

#+begin_src emacs-lisp :tangle yes
(use-package auctex-latexmk
  :after (tex auctex)
  :preface
  (defun hcps/set-latexmk-as-default ()
    (add-to-list
     'TeX-expand-list
     '("%(-PDF)"
       (lambda ()
         (cond ((string-match "TeX-engine: pdftex" (buffer-string)) "-pdf")
               ((string-match "TeX-engine: luatex" (buffer-string)) "-pdflatex=lualatex -pdf")
               ((string-match "TeX-engine: xetex" (buffer-string)) "-pdflatex=xelatex -pdf")
               (t "-dvi -pdfps")))))
    (add-to-list
     'TeX-command-list
     '("Latexmk" "latexmk %(-PDF) -synctex=1 %s"
       TeX-run-TeX nil t
       :help "Run Latexmk on file to build everything."))
    (setq TeX-command-default "Latexmk"))
  :init
  (auctex-latexmk-setup)
  :hook
  ((TeX-mode . hcps/set-latexmk-as-default)
   (LaTeX-mode . hcps/set-latexmk-as-default))
  :custom
  (auctex-latexmk-inherit-TeX-PDF-mode t))
#+end_src

The hook stuff is because all =TeX= get defined when the mode starts, so we need
to redefine them then.

** Coq

Not set up, but when I get to it:

- proof-general
- company-coq-mode
- hrs config!

* Personal

Stuff that isn't either a package nor a language nor downloadable: stuff you
coded yourself.

To-do:

- [ ] Increase/decrease font size
- [ ] Input date on command (and as a new heading in =org-mode=)

** Functions

Some very useful functions I got from other people or that I coded myself.

*** Date

Insert the current date.

#+begin_src emacs-lisp
(defun hcps/date-iso ()
  "Insert the current date, ISO format, eg. 2016-12-09."
  (interactive)
  (insert (format-time-string "%F")))

(defun hcps/date-iso-with-time ()
  "Insert the current date, ISO format with time, eg. 2016-12-09T14:34:54+0100."
  (interactive)
  (insert (format-time-string "%FT%T%z")))

(defun hcps/date-long ()
  "Insert the current date, long format, eg. December 09, 2016."
  (interactive)
  (insert (format-time-string "%B %d, %Y")))

(defun hcps/date-long-with-time ()
  "Insert the current date, long format, eg. December 09, 2016 - 14:34."
  (interactive)
  (insert (capitalize (format-time-string "%B %d, %Y - %H:%M"))))

(defun hcps/date-short ()
  "Insert the current date, short format, eg. 2016.12.09."
  (interactive)
  (insert (format-time-string "%Y.%m.%d")))

(defun hcps/date-short-with-time ()
  "Insert the current date, short format with time, eg. 2016.12.09 14:34"
  (interactive)
  (insert (format-time-string "%Y.%m.%d %H:%M")))
#+end_src

** Keybindings

Here I'll define some of my personal keybindings.

#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-x k") 'kill-this-buffer)
(global-set-key (kbd "C-c x") 'hcps/date-iso)
#+end_src
