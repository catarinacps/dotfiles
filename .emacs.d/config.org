# -*- mode: org; eval: (add-hook 'after-save-hook #'hcps/async-byte-compile-org-config nil t) -*-
#+title: My Emacs configuration file
#+author: Henrique Silva
#+email: hcpsilva@inf.ufrgs.br

These configurations represent my preferred version of Emacs, one that
uses =evil= everywhere it can and one that tries to be as minimalist as +I
want+ possible.

Cool Emacs configs from cool people:

- [[https://github.com/caisah/emacs.dz][Lots of cool people]]
- [[https://github.com/hrs/dotfiles][hrs]] (he likes org-mode and evil)
- [[https://app-learninglab.inria.fr/gitlab/learning-lab/mooc-rr-ressources/blob/master/module2/ressources/rr_org/init.org][Konrad's and Arnaud's]]
- [[https://github.com/hlissner][The doom-emacs guy]]

* Table of contents                                                     :TOC:
- [[Introduction][Introduction]]
  - [[What packages you can find here][What packages you can find here]]
  - [[=use-package=][=use-package=]]
    - [[:after][:after]]
    - [[:defer][:defer]]
    - [[:demand][:demand]]
    - [[:init][:init]]
    - [[:config][:config]]
- [[Personal][Personal]]
  - [[Information][Information]]
  - [[Functions and Macros][Functions and Macros]]
    - [[Fetching text][Fetching text]]
    - [[Date][Date]]
    - [[One-time advice][One-time advice]]
    - [[Automatic byte-compile][Automatic byte-compile]]
    - [[Auto-removing hook][Auto-removing hook]]
    - [[Trim functions][Trim functions]]
    - [[Fontification of sub-blocks][Fontification of sub-blocks]]
    - [[Modeline][Modeline]]
    - [[Move lines][Move lines]]
    - [[Fixes][Fixes]]
  - [[Definitions and preferences][Definitions and preferences]]
    - [[Paths and =defconst=][Paths and =defconst=]]
    - [[GUI elements][GUI elements]]
    - [[Text][Text]]
    - [[Mode line][Mode line]]
    - [[Line numbering and scrolling][Line numbering and scrolling]]
    - [[Randoms][Randoms]]
    - [[Better =eval-expression=][Better =eval-expression=]]
    - [[Custom variables][Custom variables]]
- [[Package configuration][Package configuration]]
  - [[Setting-up][Setting-up]]
  - [[Support][Support]]
    - [[=use-package=][=use-package=]]
    - [[=general=][=general=]]
    - [[=delight=][=delight=]]
    - [[=no-littering=][=no-littering=]]
    - [[=hide-mode-line=][=hide-mode-line=]]
  - [[Built-in][Built-in]]
    - [[=package=][=package=]]
    - [[=whitespace=][=whitespace=]]
    - [[=compile=][=compile=]]
    - [[=tramp=][=tramp=]]
    - [[=ansi-color=][=ansi-color=]]
    - [[=windmove=][=windmove=]]
    - [[=midnight=][=midnight=]]
    - [[=uniquify=][=uniquify=]]
    - [[=recentf=][=recentf=]]
    - [[=ibuffer=][=ibuffer=]]
    - [[=autoinsert=][=autoinsert=]]
    - [[=comint=][=comint=]]
  - [[Extensions][Extensions]]
    - [[=evil=][=evil=]]
    - [[=smart-mode-line=][=smart-mode-line=]]
    - [[=orderless=][=orderless=]]
    - [[=selectrum=][=selectrum=]]
    - [[=corfu=][=corfu=]]
    - [[=company=][=company=]]
    - [[=consult=][=consult=]]
    - [[=marginalia=][=marginalia=]]
    - [[=undo-tree=][=undo-tree=]]
    - [[=dashboard=][=dashboard=]]
    - [[=treemacs=][=treemacs=]]
    - [[=exec-path-from-shell=][=exec-path-from-shell=]]
    - [[=anzu=][=anzu=]]
    - [[=deadgrep=][=deadgrep=]]
    - [[=link-hint=][=link-hint=]]
    - [[=avy=][=avy=]]
    - [[=which-key=][=which-key=]]
    - [[=lsp-mode=][=lsp-mode=]]
    - [[=flycheck=][=flycheck=]]
    - [[=highlight-numbers=][=highlight-numbers=]]
    - [[=highlight-escape-sequences=][=highlight-escape-sequences=]]
    - [[=flyspell=][=flyspell=]]
    - [[=diff-hl=][=diff-hl=]]
    - [[=hydra=][=hydra=]]
    - [[=ace-window=][=ace-window=]]
    - [[=super-save=][=super-save=]]
    - [[=yasnippet=][=yasnippet=]]
    - [[=vimish-fold=][=vimish-fold=]]
    - [[=projectile=][=projectile=]]
    - [[=magit=][=magit=]]
    - [[=git-timemachine=][=git-timemachine=]]
    - [[=expand-region=][=expand-region=]]
    - [[=smartparens=][=smartparens=]]
    - [[=rainbow-delimiters=][=rainbow-delimiters=]]
    - [[=beacon=][=beacon=]]
    - [[=aggressive-indent=][=aggressive-indent=]]
    - [[=highligh-indent-guides=][=highligh-indent-guides=]]
    - [[=helpful=][=helpful=]]
    - [[=engine-mode=][=engine-mode=]]
    - [[=openwith=][=openwith=]]
    - [[=crux=][=crux=]]
    - [[=page-break-lines=][=page-break-lines=]]
    - [[=writeroom-mode=][=writeroom-mode=]]
    - [[=ssh=][=ssh=]]
    - [[=ligature.el=][=ligature.el=]]
    - [[=emacs-vterm=][=emacs-vterm=]]
    - [[=mixed-pitch-mode=][=mixed-pitch-mode=]]
    - [[=hl-todo=][=hl-todo=]]
  - [[Theme][Theme]]
- [[File modes][File modes]]
  - [[Org][Org]]
    - [[Add-ons][Add-ons]]
    - [[Export][Export]]
    - [[Babel][Babel]]
  - [[C-like languages][C-like languages]]
    - [[C/C++][C/C++]]
    - [[CUDA][CUDA]]
  - [[R][R]]
  - [[Shell script][Shell script]]
  - [[Makefile][Makefile]]
  - [[PlantUML][PlantUML]]
  - [[Lisp][Lisp]]
  - [[Elisp][Elisp]]
  - [[Python][Python]]
  - [[CMake][CMake]]
  - [[Dockerfile][Dockerfile]]
  - [[GMPL][GMPL]]
  - [[Julia][Julia]]
  - [[LaTeX][LaTeX]]
  - [[Meson][Meson]]
  - [[{bspwm,sxhkd}rc][{bspwm,sxhkd}rc]]
  - [[Configuration files][Configuration files]]
  - [[Rust][Rust]]
  - [[Perl][Perl]]
  - [[Dot (Graphviz)][Dot (Graphviz)]]
  - [[Bison/Flex/Yacc][Bison/Flex/Yacc]]
  - [[Markdown][Markdown]]
  - [[PKGBUILD][PKGBUILD]]

* Introduction

First of all, welcome to my configuration file for Emacs. I built it
from almost the ground up, picking up configs from several sources, some
of which I've cited in the beginning of this file.

As I'd like that this file be used as a source of inspiration for
others, I wrote it in an =.org= file, using all of =org-mode='s black magic
powers of tangling source blocks to intertwine both source =.el= and
prose.

Also, I've used in almost all sections of this document a package called
=use-package= in order to organize all the additional packages that I use
to get a better Emacs experience. So, I'll teach you to read a
=use-package= statement! That way you can understand what's happening
beneath all sugar syntax.

** What packages you can find here

You can find the following packages in this configuration file:

#+begin_src bash :exports results :results output list org
[ ! -f 'config.el' ] && emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "config.org")'

grep -E '(^\(use-package .*|^ *:straight .*)' config.el |
    tr -d '()' |
    awk '!/\<built-in\>|\<nil\>|\<t\>/ {print $2}' |
    sort -u
#+end_src

#+RESULTS:
#+begin_src org
- ace-window
- aggressive-indent
- ansi-color
- anzu
- auctex-latexmk
- autoinsert
- avy
- bash-completion
- beacon
- bison
- bspwm
- cargo
- cc-mode
- clang-format
- cmake-font-lock
- cmake-mode
- comint
- compile
- conf-mode
- counsel
- counsel-projectile
- counsel-tramp
- cperl-mode
- crux
- cuda-mode
- dashboard
- deadgrep
- delight
- diff-hl
- dockerfile-mode
- docker-tramp
- elisp-mode
- elisp-slime-nav
- elpy
- engine-mode
- ess
- ess-r-mode
- evil
- evil-collection
- evil-matchit
- evil-mc
- evil-numbers
- evil-smartparens
- evil-states
- evil-surround
- exec-path-from-shell
- expand-region
- flx
- flycheck
- flycheck-pos-tip
- flyspell
- general
- git-timemachine
- gmpl-mode
- graphviz-dot-mode
- gruvbox-theme
- helpful
- hide-mode-line
- highlight-doxygen
- highlight-escape-sequences
- highlight-indent-guides
- highlight-numbers
- htmlize
- hydra
- ibuffer
- ivy
- ivy-rich
- julia-mode
- jupyter
- ligature
- link-hint
- lisp-extra-font-lock
- lisp-mode
- lsp-mode
- lsp-ui
- magit
- make-mode
- markdown-mode
- meson-mode
- midnight
- modern-cpp-font-lock
- no-littering
- ob
- openwith
- org
- org-agenda
- org-attach
- org-capture
- org-id
- org-journal
- org-plus-contrib
- org-ref
- org-refile
- ox
- ox-beamer
- ox-dnd
- ox-extra
- ox-hugo
- ox-latex
- ox-twbs
- page-break-lines
- pkgbuild-mode
- plantuml-mode
- pos-tip
- preproc-font-lock
- projectile
- rainbow-delimiters
- recentf
- reftex
- rust-mode
- sh-script
- smart-mode-line
- smartparens
- smex
- ssh
- super-save
- tex
- toc-org
- tramp
- treemacs
- treemacs-evil
- treemacs-projectile
- undo-tree
- uniquify
- use-package
- vimish-fold
- visual-fill-column
- vterm
- websocket
- which-key
- whitespace
- windmove
- writeroom-mode
- yasnippet
- zmq
#+end_src

** =use-package=

Briefly, this package wraps your configuration for a given package in a
neat little statement, which can include several useful categorizations
and sub-tools.

Here are all little keywords you can use to organize your configs:

*** :after

The =:after= keyword sets a relation of dependency between the loading
of two packages. In other words, you can tell =use-package= that a given
package should only be loaded if that other package is already loaded.

#+begin_src emacs-lisp
(use-package foo)

(use-package bar
  :after foo)

(use-package moo
  :after (foo bar))    ; Supports mmultiple dependencies!
#+end_src

*** :defer

The =:defer= keyword tells =use-package= that it can defer the loading
of your package until its absolutely needed. Its behaviour is the
opposite of the keyword =:demand=.

#+begin_src emacs-lisp
(use-package foo
  :defer t)
#+end_src

*** :demand

The =:demand= keyword says to =use-package= that this package must not
be lazy-loaded, and should be loaded right away as Emacs loads.

#+begin_src emacs-lisp
(use-package foo
  :demand)
#+end_src

*** :init

The =:init= keyword can tell =use-package= to execute said commands
*BEFORE* the package is loaded. In reality, said execution will happen
as soon as the =use-package= statement is processed on the Emacs loading
process.

#+begin_src emacs-lisp
(use-package foo
  :init
  (setq bar t))
#+end_src

*** :config

The =:config= keyword, much like the =:init= keyword, tells
=use-package= to execute commands. The difference is that commands
defined with this keyword will only execute *AFTER* the package is
loaded. There is an important difference here, as =use-package= uses
what's called /lazy loading/, i.e. only load the package when you
actually need it.

#+begin_src emacs-lisp
(use-package foo
  :config
  (foo-init))
#+end_src

* Personal

Stuff that isn't either a package nor a language nor downloadable: stuff
you coded yourself.

Alas! Lexical binding:

#+begin_src emacs-lisp :tangle yes
;;; -*- lexical-binding: t -*-

#+end_src

To-do:

- [X] Increase/decrease font size
- [ ] Input date on command (and as a new heading in =org-mode=)

** Information

Some basic info about me.

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Henrique Silva"
      user-mail-address "hcpsilva@inf.ufrgs.br")
#+end_src

** Functions and Macros

Some very useful functions I got from other people or that I coded
myself.

*** Fetching text

To get the current selected text without newlines.

#+begin_src emacs-lisp :tangle yes
(defun hcps/get-selected-text (start end)
  (interactive "r")
  (if (use-region-p)
      (kill-new
       (replace-regexp-in-string
        "\n" " "
        (regionp (buffer-substring start end))))))
#+end_src

*** Date

Insert the current date.

#+begin_src emacs-lisp :tangle yes
(defun hcps/date-iso ()
  "Insert the current date, ISO format, eg. 2016-12-09."
  (interactive)
  (insert (format-time-string "%F")))

(defun hcps/date-iso-with-time ()
  "Insert the current date, ISO format with time, eg. 2016-12-09T14:34:54+0100."
  (interactive)
  (insert (format-time-string "%FT%T%z")))

(defun hcps/date-long ()
  "Insert the current date, long format, eg. December 09, 2016."
  (interactive)
  (insert (format-time-string "%B %d, %Y")))

(defun hcps/date-long-with-time ()
  "Insert the current date, long format, eg. December 09, 2016 - 14:34."
  (interactive)
  (insert (capitalize (format-time-string "%B %d, %Y - %H:%M"))))

(defun hcps/date-short ()
  "Insert the current date, short format, eg. 2016.12.09."
  (interactive)
  (insert (format-time-string "%Y.%m.%d")))

(defun hcps/date-short-with-time ()
  "Insert the current date, short format with time, eg. 2016.12.09 14:34"
  (interactive)
  (insert (format-time-string "%Y.%m.%d %H:%M")))
#+end_src

*** One-time advice

'Cause that is kinda cool to have. Got it from [[https://emacs.stackexchange.com/questions/26251/one-time-advice][this]] place.

#+begin_src emacs-lisp :tangle yes
(defun advise-once (symbol where function &optional props)
  (advice-add symbol :after `(lambda (&rest _) (advice-remove ',symbol ',function)))
  (advice-add symbol where function props))
#+end_src

*** Automatic byte-compile

To use with this configuration file.

#+begin_src emacs-lisp :tangle yes
(defconst config-file-name (expand-file-name "config.org" user-emacs-directory)
  "The path to the configuration")

(defun hcps/async-byte-compile-org-config ()
  "To add as a hook when saving the config file."
  (when (y-or-n-p "Recompile config?")
    (start-process
     "Emacs : Config compilation" "*compile-config*" "emacs"
     "--batch" "-l" (expand-file-name "compile-config.el" user-emacs-directory))))
#+end_src

*** Auto-removing hook

Sometimes it's cool to have a single-use hook.

#+begin_src emacs-lisp :tangle yes
(eval-and-compile
  (defmacro hcps/hook-require-once (hook package)
    "Add a hook to `pre-command-hook' which requires the given package once."
    (let ((func (intern (concat "hcps/" (symbol-name hook) "-require-" (symbol-name package)))))
      `(progn
         (defun ,func ()
           (remove-hook ',hook #',func)
           (require ',package))
         (add-hook ',hook #',func)))))
#+end_src

*** Trim functions

Directly from Magnar Sveen's =s.el=

#+begin_src emacs-lisp :tangle yes
(defun hcps/s-trim-left (s)
  "Remove whitespace at the beginning of S."
  (declare (pure t) (side-effect-free t))
  (if (string-match "\\`[ \t\n\r]+" s)
      (replace-match "" t t s)
    s))

(defun hcps/s-trim-right (s)
  "Remove whitespace at the end of S."
  (declare (pure t) (side-effect-free t))
  (if (string-match "[ \t\n\r]+\\'" s)
      (replace-match "" t t s)
    s))

(defun hcps/s-trim (s)
  "Remove whitespace at the beginning and end of S."
  (declare (pure t) (side-effect-free t))
  (s-trim-left (s-trim-right s)))
#+end_src

*** Fontification of sub-blocks

Inside other languages or strings, like in shell-scripts and such.

- [ ] =org-src-font-lock-fontify-block=
  - =org-fontify-meta-lines-and-blocks=

#+begin_src emacs-lisp :tangle yes
(defun hcps/externally-fontify-sub-block (lang start end)
  "Shamelessly stolen from `org-mode' implementation (sort-of).
Many languages include code sections in a different language.
This way we don't need to reimplement the font-lock rules and we
still get the pretty colors."
  (when (fboundp lang)
    (let ((string (buffer-substring-no-properties start end))
          (modified (buffer-modified-p))
          (this-buffer (current-buffer)))
      (remove-text-properties start end '(face nil))
      (with-current-buffer
          (get-buffer-create (format " *block-fontification:%s*" (symbol-name lang)))
        (let ((inhibit-modification-hooks nil))
          (erase-buffer)
          ;; Add string and a final space to ensure property change.
          (insert string " "))
        (unless (eq major-mode lang) (funcall lang))
        (font-lock-ensure)
        (let ((pos (point-min))
              next)
          (while (setq next (next-property-change pos))
            ;; Handle additional properties from font-lock, so as to
            ;; preserve, e.g., composition.
            (dolist (prop (cons 'face font-lock-extra-managed-props))
              (let ((new-prop (get-text-property pos prop)))
                (put-text-property
                 (+ start (1- pos)) (1- (+ start next)) prop new-prop
                 this-buffer)))
            (setq pos next))))
      (add-text-properties
       start end
       '(font-lock-fontified t fontified t font-lock-multiline t))
      (set-buffer-modified-p modified))))

(defun hcps/fontify-region-as-lang (lang rx-start rx-end)
  (lambda (limit)
    (let ((case-fold-search t))
      (when (re-search-forward rx-start limit t)
        (let ((block-start (match-end 0))
              (block-end nil))
          (when (re-search-forward rx-end nil t)
            (setq block-end (match-beginning 0))
            (hcps/externally-fontify-sub-block lang block-start block-end)))))))
#+end_src

*** Modeline

A clear modeline is prettier sometimes

#+begin_src emacs-lisp :tangle yes
(defun hcps/clean-mode-line ()
  "Clean mode-line format."
  (setq-local mode-line-format ""))
#+end_src

And sometimes there's no need in having an evil tag

#+begin_src emacs-lisp :tangle yes
(defun hcps/hide-evil-tag ()
  "Some buffers don't need it."
  (setq-local evil-normal-state-tag nil)
  (setq-local evil-emacs-state-tag nil)
  (setq-local evil-insert-state-tag nil)
  (setq-local evil-replace-state-tag nil)
  (setq-local evil-motion-state-tag nil)
  (setq-local evil-visual-state-tag nil)
  (setq-local evil-operator-state-tag nil))
#+end_src

*** Move lines

Using the ~transpose-lines~ function.

#+begin_src emacs-lisp :tangle yes
(defmacro ew/save-column (&rest body)
  `(let ((column (current-column)))
     (unwind-protect
         (progn ,@body)
       (move-to-column column))))

(defun hcps/move-line-up ()
  "Move up the current line."
  (interactive)
  (ew/save-column
   (transpose-lines 1)
   (forward-line -2)))

(defun hcps/move-line-down ()
  "Move down the current line."
  (interactive)
  (ew/save-column
   (forward-line 1)
   (transpose-lines 1)
   (forward-line -1)))
#+end_src

*** Fixes

Stuff changed in trunk and I'm way too eager to return to stable.

#+begin_src emacs-lisp :tangle yes
(defun define-obsolete-fix (func obsolete current &optional when &rest args)
  (apply func obsolete current (or when "now") args))

(advice-add 'define-obsolete-function-alias :around #'define-obsolete-fix)
(advice-add 'define-obsolete-variable-alias :around #'define-obsolete-fix)

(defun disable-scroll-margin (fun &rest args)
  "Disable margin from active line in modes where it is detrimental."
  (let ((scroll-margin 0))
    (apply fun args)))

(defun turn-off-cursor (&rest _)
  "It is kinda unnecessary while inside some modes."
  (internal-show-cursor nil nil))
#+end_src

** Definitions and preferences

Defaults that are better if defined /other/ way.

*** Paths and =defconst=

Silly names for easier path usage.

#+begin_src emacs-lisp :tangle yes
(eval-and-compile
  (defconst current-user (getenv "USER") "The current user.")
  (defconst home-dir (expand-file-name current-user "/home/") "The user home dir.")

  (defconst root-dir (expand-file-name user-emacs-directory) "The root dir of Emacs.")
  (defconst var-user-dir (expand-file-name "var" root-dir) "The temporaries directory.")
  (defconst vendor-user-dir (expand-file-name "vendor" root-dir) "The random .el directory.")
  (defconst proj-user-dir (expand-file-name "Repositories" home-dir) "Default projects directory.")
  (defconst onedrive-user-dir (expand-file-name "OneDrive" home-dir) "Default OneDrive path."))
#+end_src

*** GUI elements

Almost every GUI element of Emacs is useless and a waste of screen
space. Most of those are turned off in my =early-init.el= config.

And then there's the title question. I for one like Emacs capitalized,
so...

#+begin_src emacs-lisp :tangle yes
(setq-default frame-title-format
              '((capitalize invocation-name)
                (:eval (if (buffer-file-name)
                           (abbreviate-file-name (buffer-file-name))
                         "%b"))))
#+end_src

*** Text

Here's every other setting relating to text editing I can't categorize
any further.

#+begin_src emacs-lisp :tangle yes
(setq-default fill-column 72
              ;; posssible values: (left right center full nil)
              default-justification 'left
              indent-tabs-mode nil
              tab-always-indent 'complete
              tab-first-completion 'word
              bidi-paragraph-direction 'left-to-right
              bidi-inhibit-bpa t
              sentence-end-double-space nil
              tab-width 4
              line-spacing 0
              truncate-lines t
              require-final-newline t
              x-stretch-cursor t
              cursor-in-non-selected-windows nil)
#+end_src

Also, =auto-fill-mode= is very useful to justify paragraphs
automatically while writing.

#+begin_src emacs-lisp :tangle yes
(add-hook 'text-mode-hook #'turn-on-auto-fill)
#+end_src

*** Mode line

Here's everything related to the mode-line.

#+begin_src emacs-lisp :tangle yes
(setq-default display-time-format "%H:%M "
              display-time-default-load-average nil)

(display-time-mode +1)
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)
#+end_src

*** Line numbering and scrolling

+I like the vim style of relative numbering of lines.+ Never mind, I
grew tired of it.

#+begin_src emacs-lisp :tangle yes
(setq-default display-line-numbers-type t
              display-line-numbers-width-start t)

;; I used to do this globally, but now let's only do selectively
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

And I also like the vim style of scrolling better.

#+begin_src emacs-lisp :tangle yes
(setq-default auto-window-vscroll t
              ;; line-move-visual nil
              scroll-conservatively 101
              scroll-margin 10)
#+end_src

Small fix for =scroll-margin=

#+begin_src emacs-lisp :tangle yes
(defun get-lines-from-top ()
  (save-excursion
    (beginning-of-line)
    (count-screen-lines (point) (window-start))))

(defun scroll-margin-fix (func &rest args)
  (apply func args)
  (if (> scroll-margin 0)
      (let ((diff (- (min scroll-margin (floor (* maximum-scroll-margin (window-screen-lines))))
                     (get-lines-from-top))))
        (when (> diff 0)
          (scroll-down 1)))))

(advice-add 'previous-line :around 'scroll-margin-fix)

;; (add-hook 'prog-mode-hook #'visual-line-mode)
#+end_src

Highlighting the current line is also very useful.

#+begin_src emacs-lisp :tangle yes
(global-hl-line-mode 1)
#+end_src

*** Randoms

Random configs and definitions that don't have a clear category.

#+begin_src emacs-lisp :tangle yes
(setq ad-redefinition-action 'accept         ; Silence warnings for redefinition
      confirm-kill-emacs 'yes-or-no-p        ; Confirm before exiting Emacs
      select-enable-clipboard t              ; Merge system's and Emacs' clipboard
      blink-matching-paren nil               ; Disable annoying blink-matching-paren
      window-combination-resize t            ; Resize windows proportionally
      read-process-output-max (* 1024 1024)
      ring-bell-function 'ignore)            ; No bell ring

(setq backup-directory-alist `((".*" . ,temporary-file-directory))
      auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

(add-hook 'after-save-hook
          #'executable-make-buffer-file-executable-if-script-p)

;; Replace yes/no prompts with y/n
(fset 'yes-or-no-p 'y-or-n-p)

;; Set Emacs to call the garbage collector on focus-out
;; (add-hook 'focus-out-hook #'garbage-collect)

;; use GPG-agent instead of the default
(setenv "SSH_AUTH_SOCK"
        (concat (getenv "XDG_RUNTIME_DIR") "/gnupg/S.gpg-agent.ssh"))
(setq epg-pinentry-mode 'loopback)

(global-auto-revert-mode t)

;; (setq hippie-expand-try-functions-list '(try-expand-dabbrev
;;                                          try-expand-dabbrev-all-buffers
;;                                          try-expand-dabbrev-from-kill
;;                                          try-complete-file-name-partially
;;                                          try-complete-file-name
;;                                          try-expand-all-abbrevs
;;                                          try-expand-list
;;                                          try-expand-line
;;                                          try-complete-lisp-symbol-partially
;;                                          try-complete-lisp-symbol))

;; (require 'ediff)
;; (setq ediff-window-setup-function 'ediff-setup-windows-plain)

;; (require 'eshell)
;; (setq eshell-directory-name (expand-file-name "eshell" var-user-dir))

;; (global-diff-hl-mode +1)
;; (add-hook 'dired-mode-hook 'diff-hl-dired-mode)

;; ;; use hippie-expand instead of dabbrev
;; (global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

*** Better =eval-expression=

Some basic configuration to enhance the =eval-expression= command.

#+begin_src emacs-lisp :tangle yes
(defun sane-eval-expr-defaults ()
  "Enable some sane modes for `eval-expression'."
  (smartparens-mode +1))

(add-hook 'eval-expression-minibuffer-setup-hook #'sane-eval-expr-defaults)
#+end_src

*** Custom variables

Finally, let's load our custom variables

#+begin_src emacs-lisp :tangle yes
(setq custom-file (expand-file-name "custom.el" var-user-dir))

(load-file custom-file)
#+end_src

* Package configuration

Everything that isn't an specific file-mode =.el=.

** Setting-up

Some setting up before we start configuring the packages themselves.

#+begin_src emacs-lisp :tangle yes
(eval-and-compile
  (setq straight-check-for-modifications '(watch-files find-when-checking))

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (setq package-user-dir (expand-file-name "straight" user-emacs-directory))

  (unless (file-directory-p package-user-dir)
    (make-directory package-user-dir t)))
#+end_src

I use =use-package= to load my packages and to organize them neatly in
this org file.

#+begin_src emacs-lisp :tangle yes
(eval-when-compile
  (straight-use-package 'use-package)

  (setq use-package-verbose t
        use-package-hook-name-suffix nil
        byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local)))

;; general requires this bit otherwise everything blows up when native
;; compiling
(eval-and-compile
  (straight-use-package 'general)
  (require 'general))
#+end_src

** Support

All these packages just help on the configuration of the rest of the
other packages.

*** =use-package=                                                   :package:

The one and only, for runtime use only!

#+begin_src emacs-lisp :tangle yes
(use-package use-package
  :defer t
  :straight t
  :commands (use-package-core use-package))
#+end_src

*** =general=                                                   :keybindings:

To facilitate my keybinding issues, I also use =general.el=. It adds
some very welcome keywords to =use-package=, in which I'll use
extensively throughout this file.

#+begin_src emacs-lisp :tangle yes
(use-package general
  :straight t
  :commands general-define-key
  :preface
  (defconst hcps/leader-key "SPC"
    "Leader key for some special commands.")
  (defconst hcps/alt-leader-key "C-:"
    "Alternate leader key.")
  (defvar hcps/leader-map (make-sparse-keymap)
    "Keymap for all my leader bindings.")
  :init
  (general-unbind 'global-map
    hcps/leader-key)
  (general-def
    :keymaps 'override
    hcps/alt-leader-key '(:wk "leader" :keymap hcps/leader-map :package general))
  (general-def
    :keymaps 'special-mode-map
    hcps/leader-key '(:wk "leader" :keymap hcps/leader-map :package general))
  :config
  ;; common emacs styled keybindings
  (general-def '(global-map special-mode-map)
    "C-x C-b" #'ibuffer
    "C-x k" #'kill-this-buffer
    "C-c x" #'hcps/date-iso
    "<f9>" #'hcps/get-selected-text
    "M--" #'text-scale-decrease
    "M-+" #'text-scale-increase
    "C-S-h" #'tab-previous
    "C-S-l" #'tab-next
    "C-S-n" #'tab-new
    "C-S-c" #'tab-close
    "C-S-s" #'tab-select
    "M-K" #'hcps/move-line-up
    "M-J" #'hcps/move-line-down
    "<f12>" #'menu-bar-mode)
  ;; leader-map keybindings
  (general-def 'hcps/leader-map
    "s" #'save-buffer
    "k" #'kill-this-buffer
    "i" #'indent-region
    "b" #'switch-to-buffer
    "e c" #'comment-dwim
    "e a" #'align-current
    "e p" #'yank-pop
    "e e" #'eval-region
    "n j" #'goto-line
    "f f" #'find-file
    "w k" #'delete-window
    "w v" #'split-window-vertically
    "w h" #'split-window-horizontally
    "v n p" #'narrow-to-page
    "v n f" #'narrow-to-defun
    "v n r" #'narrow-to-region
    "v n w" #'widen)
  ;; cute names for the prefixes (some will only be defined further
  ;; along)
  (general-def '(normal visual insert emacs special-mode-map)
    :prefix hcps/leader-key
    :non-normal-prefix hcps/alt-leader-key
    "g" '(:ignore t :wk "magit")
    "f" '(:ignore t :wk "file")
    "w" '(:ignore t :wk "window")
    "n" '(:ignore t :wk "navigate")
    "o" '(:ignore t :wk "org")
    "m" '(:ignore t :wk "mode")
    "v" '(:ignore t :wk "view")
    "e" '(:ignore t :wk "edit")
    "v n" '(:ignore t :wk "narrow")))
#+end_src

*** =delight=                                                      :modeline:

And we'll use =delight= to hide minor-modes names and such.

#+begin_src emacs-lisp :tangle yes
(use-package delight
  :straight t
  :commands delight
  :delight
  (auto-fill-function " af")
  (eldoc-mode " eldoc")
  (editorconfig-mode)
  (flymake-mode " flymk" flymake)
  (visual-line-mode " vl")
  (abbrev-mode))
#+end_src

*** =no-littering=                                                 :cleaning:

=no-littering= will help us by setting sane paths to all cache and
history files the packages might set.

#+begin_src emacs-lisp :tangle yes
(use-package no-littering
  :straight t
  :demand t)
#+end_src

*** =hide-mode-line=                                               :modeline:

Made by the doom-emacs guy. Yeah I know I could just write a function
for this, but eh.

#+begin_src emacs-lisp :tangle yes
(use-package hide-mode-line
  :defer t
  :straight t
  :commands hide-mode-line-mode)
#+end_src

** Built-in

The ones that /really/ don't require =use-package :straight=.

- [ ] bookmark
- [ ] dired
- [ ] hippie-expand
- [ ] eshell
- [ ] save-place
- [X] ibuffer
- [-] autoinsert
  - [ ] org
  - [X] shellscript
  - [ ] elisp
  - [X] c
  - [X] makefile
- [ ] electric-pairs

*** =package=

Same as above but with keybindings and =package-initialize=.

#+begin_src emacs-lisp :tangle no
(use-package package
  :defer t
  :straight (:type built-in)
  :custom
  (package-archives
   '(("melpa" . "https://melpa.org/packages/")
     ("org"   . "https://orgmode.org/elpa/")
     ("gnu"   . "https://elpa.gnu.org/packages/")))
  :general
  (:keymaps 'hcps/leader-map
   "p l" 'package-list-packages
   "p d" 'package-delete
   "p i" 'package-install
   "p r" 'package-reinstall)
  :config
  (package-initialize))
#+end_src

*** =whitespace=

Let's monitor ourselves with =whitespace=.

#+begin_src emacs-lisp :tangle yes
(use-package whitespace
  :defer t
  :straight (:type built-in)
  :commands (whitespace-mode whitespace-cleanup delete-trailing-whitespace)
  :hook
  ((before-save-hook . whitespace-cleanup)
   (before-save-hook . delete-trailing-whitespace)
   (text-mode-hook   . whitespace-mode)
   (prog-mode-hook   . whitespace-mode))
  :custom
  (whitespace-line-column 85)
  (whitespace-style '(face tabs empty trailing lines-tail)))
#+end_src

*** =compile=

This compilation helper mode facilitates the navigation of error outputs
on compilations.

#+begin_src emacs-lisp :tangle yes
(use-package compile
  :defer t
  :straight (:type built-in)
  :commands compile-mode
  :custom
  (compilation-ask-about-save nil)
  (compilation-always-kill t)
  (compilation-scroll-output 'first-error)
  (compilation-finish-functions (lambda (buffer &rest _) (delete-windows-on buffer 0))))
#+end_src

*** =tramp=

=tramp= is very useful when it comes to editing remote files and to
editing as super-user.

#+begin_src emacs-lisp :tangle yes
(use-package tramp
  :defer t
  :straight (:type built-in)
  :custom
  (tramp-default-method "ssh")
  (tramp-terminal-type "xterm-mono"))
#+end_src

*** =ansi-color=

To have pretty colors on ansi output.

#+begin_src emacs-lisp :tangle yes
(use-package ansi-color
  :defer t
  :straight (:type built-in)
  :commands
  (ansi-color-for-comint-mode-on ansi-color-filter-apply ansi-color-process-output)
  :hook
  ((shell-mode-hook                   . ansi-color-for-comint-mode-on)
   (eshell-preoutput-filter-functions . ansi-color-filter-apply)
   (comint-output-filter-functions    . ansi-color-process-output)))
#+end_src

*** =windmove=

A package that creates commands to move around windows.

#+begin_src emacs-lisp :tangle yes
(use-package windmove
  :defer t
  :straight (:type built-in)
  :general
  (:keymaps 'override
   "C-M-h" #'windmove-left
   "C-M-l" #'windmove-right
   "C-M-k" #'windmove-up
   "C-M-j" #'windmove-down))
#+end_src

*** =midnight=

Originally, =midnight= is used to /run something at midnight/. I use its
feature that kills old buffers.

#+begin_src emacs-lisp :tangle yes
(use-package midnight
  :disabled
  :defer 60
  :straight (:type built-in)
  :custom
  (clean-buffer-list-delay-general (/ 1 12))
  (clean-buffer-list-delay-special (* 1 3600))
  (clean-buffer-list-kill-buffer-names
   '("*Help*" "*Apropos*" "*Buffer List*" "*Compile-Log*" "*info*" "*vc*"
     "*vc-diff*" "*diff*" "*IBuffer*" "*Finder*")))
#+end_src

*** =uniquify=

=uniquify= creates automatic meaningful names for buffers with the same
name:

#+begin_src emacs-lisp :tangle yes
(use-package uniquify
  :straight (:type built-in)
  :custom
  (uniquify-buffer-name-style 'post-forward)
  (uniquify-separator ":")
  (uniquify-after-kill-buffer-p t)
  (uniquify-ignore-buffers-re "^[*[:space:]]"))
#+end_src

*** =recentf=

Keep a list of recent files with =recentf=

#+begin_src emacs-lisp :tangle yes
(use-package recentf
  :straight (:type built-in)
  :commands recentf-open-files
  :hook
  (kill-emacs-hook . recentf-cleanup)
  :custom
  (recentf-save-file (expand-file-name "recentf-save.el" var-user-dir))
  (recentf-max-menu-items 0)
  (recentf-max-saved-items 300)
  (recentf-exclude
   `(file-remote-p
     "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\)$"
     "^/tmp/"
     "^/ssh:"
     "\\.?ido\\.last$"
     "\\.revive$"
     "/TAGS$"
     ,var-user-dir
     ,package-user-dir
     ,(expand-file-name "savefile" root-dir)))
  (recentf-auto-cleanup 'never)
  :config
  (recentf-mode +1))
#+end_src

*** =ibuffer=

Way better than the default one (and is built-in!)

#+begin_src emacs-lisp :tangle yes
(use-package ibuffer
  :straight (:type built-in)
  :hook
  ((ibuffer-mode-hook . hcps/hide-evil-tag)
   (ibuffer-mode-hook . evil-emacs-state))
  :general
  (:keymaps 'ibuffer-mode-map
   "q" 'kill-this-buffer
   "j" 'ibuffer-forward-line
   "k" 'ibuffer-backward-line
   "K" 'ibuffer-do-kill-lines
   "J" 'ibuffer-jump-to-buffer
   hcps/leader-key '(:wk "leader" :keymap hcps/leader-map :package general))
  (:keymaps 'hcps/leader-map
   "B" 'ibuffer)
  (:keymaps 'override
   "C-x C-b" 'ibuffer))
#+end_src

*** =autoinsert=

To easily insert boilerplate text into files that need it, e.g. an
org-mode beamer file, org-mode latex-file or a shell-script. The default
is already pretty packed with templates, but I intend to ignore most of
them. In my opinion, if I created an =autoinsert= directory, the templates
would be easier to maintain and the configuration would be cleaner.

- [[https://emacs.stackexchange.com/questions/45629/template-for-new-file]]
- [[https://www.emacswiki.org/emacs/AutoInsertMode]]
- [[https://www.emacswiki.org/emacs/AutoInsertChoose]]

#+begin_src emacs-lisp :tangle yes
(use-package autoinsert
  :defer t
  :straight (:type built-in)
  :preface
  (defmacro hcps/yas-auto-insert-template (name mode)
    "Looks up the given name and expands it on point."
    (let ((func (intern (concat "hcps/" (symbol-name mode) "-insert-" name))))
      `(defun ,func ()
         (interactive)
         (yas-expand-snippet (yas-lookup-snippet ,name ',mode)))))
  (defmacro auto-insert-choose-and-call (template-alist)
    "Interactively choose and call a function from TEMPLATE-ALIST.
TEMPLATE-ALIST should be a list whose elements are (STRING FUNCTION).
Intended for use in `auto-insert-alist'"
    `(let ((cell (assoc (completing-read "Template: " ,template-alist) ,template-alist)))
       (when cell
         (funcall (cadr cell)))))
  :init
  (hcps/yas-auto-insert-template "header-template" c-mode)
  (hcps/yas-auto-insert-template "header-template" c++-mode)
  (hcps/yas-auto-insert-template "source-template" c-mode)
  (hcps/yas-auto-insert-template "simple-template" cmake-mode)
  (hcps/yas-auto-insert-template "simple-template" makefile-mode)
  (hcps/yas-auto-insert-template "simple-template" sh-mode)
  :hook
  (find-file-hook . auto-insert)
  :custom
  (auto-insert t)
  (auto-insert-query nil)
  (auto-insert-directory (expand-file-name "templates/" root-dir))
  (auto-insert-alist
   `((("\\.h$" . "C header") .
      [hcps/c-mode-insert-header-template])
     (("\\.[Hh]\\(pp\\|\\+\\+\\)$" . "C++ header")
      [hcps/c++-mode-insert-header-template])
     (("\\.[Cc]\\(pp\\|\\+\\+\\)?$" . "C / C++ source") .
      [hcps/c-mode-insert-source-template])
     ;; ((org-mode . "Org mode")
     ;;  lambda nil
     ;;  ,(auto-insert-choose-and-call
     ;;    (("Beamer presentation"
     ;;      (hcps/yas-auto-insert-template "org-beamer-template" org-mode))
     ;;     ("LaTeX document"
     ;;      (hcps/yas-auto-insert-template "org-latex-template" org-mode))
     ;;     ("Common document"
     ;;      (hcps/yas-auto-insert-template "org-template" org-mode)))))
     ((cmake-mode . "CMake") .
      [hcps/cmake-mode-insert-simple-template])
     ((makefile-mode . "Makefile") .
      [hcps/makefile-mode-insert-simple-template])
     ((sh-mode . "Shell Script") .
      [hcps/sh-mode-insert-simple-template])
     ))
  :config
  (require 'yasnippet))
#+end_src

*** =comint=

If this works, I'll be very much pleasantly surprised.

#+begin_src emacs-lisp :tangle yes
(use-package comint
  :defer t
  :straight (:type built-in)
  :preface
  (defun comint-fix-window-size ()
    "Change process window size."
    (when (derived-mode-p 'comint-mode)
      (let ((process (get-buffer-process (current-buffer))))
        (when process
          (set-process-window-size process (window-height) 72)))))
  :hook
  (comint-exec-hook . comint-fix-window-size))
#+end_src

** Extensions

The ones from MELPA and ELPA and whatever.

- [X] vterm

*** =evil=

=evil=, or /Extensible vi Layer/, is a minor mode that changes Emacs
text editing keybindings to match the modal edit modes of vi and vim.
Yes, you can have the best of both worlds!

#+begin_src emacs-lisp :tangle yes
(use-package evil
  :straight t
  :commands evil-set-initial-state
  :defines (evil-normal-state-map evil-visual-state-map)
  :preface
  (defun hcps/shift-left-region ()
    "Shift left and restore visual selection."
    (interactive)
    (evil-shift-left (region-beginning) (region-end))
    (evil-normal-state)
    (evil-visual-restore))
  (defun hcps/shift-right-region ()
    "Shift right and restore visual selection."
    (interactive)
    (evil-shift-right (region-beginning) (region-end))
    (evil-normal-state)
    (evil-visual-restore))
  (defun dzop/evil-org-insert-state-in-edit-buffer (fun &rest args)
    "Bind `evil-default-state' to `insert' before calling FUN with ARGS."
    (let ((evil-default-state 'insert)
          ;; Force insert state
          evil-emacs-state-modes
          evil-normal-state-modes
          evil-motion-state-modes
          evil-visual-state-modes
          evil-operator-state-modes
          evil-replace-state-modes)
      (apply fun args)
      (evil-refresh-cursor)))
  :init
  (setq-default evil-want-keybinding nil)
  (advice-add 'org-babel-do-key-sequence-in-edit-buffer
              :around #'dzop/evil-org-insert-state-in-edit-buffer)
  (hcps/hook-require-once pre-command-hook evil)
  (setq-default
   evil-emacs-state-cursor    '("red"  box)
   evil-normal-state-cursor   '("gray" box)
   evil-visual-state-cursor   '("gray" hollow)
   evil-insert-state-cursor   '("gray" bar)
   evil-motion-state-cursor   '("gray" hbar)
   evil-operator-state-cursor '("gray" evil-half-cursor)
   evil-normal-state-tag   (propertize "   NORMAL   " 'face '((:background "DarkGoldenrod2" :foreground "black")))
   evil-emacs-state-tag    (propertize "   EMACS    " 'face '((:background "SkyBlue2"       :foreground "black")))
   evil-insert-state-tag   (propertize "   INSERT   " 'face '((:background "chartreuse3"    :foreground "black")))
   evil-replace-state-tag  (propertize "  REPLACE   " 'face '((:background "chocolate"      :foreground "black")))
   evil-motion-state-tag   (propertize "   MOTION   " 'face '((:background "plum3"          :foreground "black")))
   evil-visual-state-tag   (propertize "   VISUAL   " 'face '((:background "gray"           :foreground "black")))
   evil-operator-state-tag (propertize "  OPERATOR  " 'face '((:background "sandy brown"    :foreground "black"))))
  :general
  (:states '(normal visual)
   hcps/leader-key '(:wk "leader" :keymap hcps/leader-map :package general))
  (:states 'insert
   "<up>" #'previous-line
   "<down>" #'next-line
   "<left>" #'left-char
   "<right>" #'right-char
   "<tab>" #'indent-for-tab-command
   "<return>" #'evil-ret-and-indent)
  (:states 'visual
   ">" #'hcps/shift-right-region
   "<" #'hcps/shift-left-region)
  :custom
  (evil-esc-delay 0)
  (evil-shift-width 2)
  (evil-auto-indent t)
  (evil-undo-system 'undo-tree)
  (evil-want-fine-undo t)
  (evil-search-wrap t)
  (evil-regexp-search t)
  (evil-search-module 'isearch)
  (evil-echo-state nil)
  (evil-want-C-u-scroll t)
  (evil-want-C-d-scroll t)
  (evil-want-Y-yank-to-eol t)
  (evil-ex-substitute-global t)
  (evil-respect-visual-line-mode t)
  (evil-mode-line-format '(before . mode-line-front-space))
  :config
  (evil-mode +1)
  (require 'evil-states))
#+end_src

**** States

Apparently the =evil-states= package  isn't being loaded correctly after
=evil=...

#+begin_src emacs-lisp :tangle yes
(use-package evil-states
  :after evil
  :straight (:type built-in)
  :custom
  (evil-emacs-state-cursor  '("red" box))
  (evil-normal-state-cursor '("gray" box))
  (evil-visual-state-cursor '("gray" hollow))
  (evil-insert-state-cursor '("gray" bar))
  (evil-motion-state-cursor '("gray" hbar))
  (evil-operator-state-cursor '("gray" evil-half-cursor))
  (evil-normal-state-tag   (propertize "   NORMAL   " 'face '((:background "DarkGoldenrod2" :foreground "black"))))
  (evil-emacs-state-tag    (propertize "   EMACS    " 'face '((:background "SkyBlue2"       :foreground "black"))))
  (evil-insert-state-tag   (propertize "   INSERT   " 'face '((:background "chartreuse3"    :foreground "black"))))
  (evil-replace-state-tag  (propertize "  REPLACE   " 'face '((:background "chocolate"      :foreground "black"))))
  (evil-motion-state-tag   (propertize "   MOTION   " 'face '((:background "plum3"          :foreground "black"))))
  (evil-visual-state-tag   (propertize "   VISUAL   " 'face '((:background "gray"           :foreground "black"))))
  (evil-operator-state-tag (propertize "  OPERATOR  " 'face '((:background "sandy brown"    :foreground "black"))))
  )
#+end_src

**** Cursors

Here we have both =evil-matchit=, which allows you to jump between tags
automatically,

#+begin_src emacs-lisp :tangle yes
(use-package evil-matchit
  :after evil
  :straight t
  :custom
  (evilmi-may-jump-by-percentage nil)
  :config
  (global-evil-matchit-mode +1))
#+end_src

and =evil-mc= implements the =multiple-cursors= functionality to
=evil-mode=.

#+begin_src emacs-lisp :tangle yes
(use-package evil-mc
  :after evil
  :straight t
  :delight
  :general
  (:states 'visual
   "A" #'evil-mc-make-cursor-in-visual-selection-end
   "I" #'evil-mc-make-cursor-in-visual-selection-beg)
  (:states '(normal visual)
   "" #'evil-mc-make-and-goto-prev-cursor)
  (:keymaps 'hcps/leader-map
   "ESC" #'evil-mc-undo-all-cursors)
  :config
  (global-evil-mc-mode +1)
  (fmakunbound 'evil-mc-make-and-goto-prev-cursor))
#+end_src

**** Pairs

On pairs (and regions really) we have =evil-smartparens=, to use better
bindings to =smartparens=,

#+begin_src emacs-lisp :tangle yes
(use-package evil-smartparens
  :after evil
  :straight t
  :delight
  :hook
  (smartparens-enabled-hook . evil-smartparens-mode))
#+end_src

and =evil-surround=, which is a port of =surround= from vim and allow
you to quickly delete or change surrounding ="= and ='= from words or
paragraphs or whatever, as it integrates with vim's verb way of
expressing actions.

#+begin_src emacs-lisp :tangle yes
(use-package evil-surround
  :after evil
  :straight t
  :general
  (:states 'operator
   "s" #'evil-surround-edit
   "S" #'evil-Surround-edit)
  (:states 'visual
   "S" #'evil-surround-region
   "gS" #'evil-Surround-region)
  :config
  (add-to-list 'evil-surround-pairs-alist '(?/ . ("/" . "/")))
  (add-to-list 'evil-surround-pairs-alist '(?* . ("*" . "*")))
  (global-evil-surround-mode +1))
#+end_src

**** Utilities

As it gets impossible to not use vim keybindings everywhere,
=evil-collection= adds a bunch of cool =evil= keybindings to other
popular packages,

#+begin_src emacs-lisp :tangle yes
(use-package evil-collection
  :after evil
  :straight t
  :config
  (setq evil-collection-mode-list (cl-set-difference evil-collection-mode-list '(dashboard ibuffer)))
  (evil-collection-init))
#+end_src

and also =evil-numbers=, to have nice keybindings to increase or
decrease numbers.

#+begin_src emacs-lisp :tangle yes
(use-package evil-numbers
  :after evil
  :straight t
  :general
  (:states 'normal
   "C-a" #'evil-numbers/inc-at-pt
   "C-S-a" #'evil-numbers/dec-at-pt))
#+end_src

*** =smart-mode-line=

I use =smart-mode-line= as it is very minimalist and informative (and it
looks very pretty on =gruvbox=).

#+begin_src emacs-lisp :tangle yes
(use-package smart-mode-line
  :straight t
  :custom
  (sml/size-indication-format " %I ")
  (sml/line-number-format "%4l")
  (sml/use-projectile-p nil)
  (sml/shorten-directory nil)
  (sml/shorten-modes t)
  (sml/mode-width 'right)
  (sml/name-width 40)
  (sml/theme 'respectful)
  (sml/no-confirm-load-theme t)
  (sml/replacer-regexp-list
   '(("^~/\\.emacs\\.d/elpa/" ":ELPA:")
     ("^~/\\.emacs\\.d/" ":ED:")
     ("^/sudo:.*:" ":SU:")
     ("^~/Documents/" ":DOC:")
     ("^~/Repositories/" ":VCS:")
     ("^~/OneDrive/CIC/" ":UNI:")
     ("^~/OneDrive/" ":OD:")))
  :config
  (sml/setup))
#+end_src

*** =orderless=

#+begin_src emacs-lisp :tangle yes
(use-package orderless
  :straight t
  :commands (orderless-filter orderless-highlight-matches)
  :init
  (hcps/hook-require-once pre-command-hook orderless)
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides nil)
  (orderless-skip-highlighting (lambda () selectrum-is-active))
  (orderless-matching-styles '(orderless-regexp orderless-initialism orderless-prefixes))
  :custom-face
  (orderless-match-face-0 ((t (:weight bold :foreground "#d75f5f"))))
  (orderless-match-face-1 ((t (:weight bold :foreground "#ffaf00"))))
  (orderless-match-face-2 ((t (:weight bold :foreground "#87afaf"))))
  (orderless-match-face-3 ((t (:weight bold :foreground "#d787af"))))
  :config
  (savehist-mode +1))
#+end_src

*** =selectrum=

#+begin_src emacs-lisp :tangle yes
(use-package selectrum
  :straight t
  :demand t
  :after orderless
  :custom
  (selectrum-max-window-height 7)
  (selectrum-count-style 'current/matches)
  (selectrum-complete-in-buffer nil)
  (selectrum-extend-current-candidate-highlight t)
  (selectrum-refine-candidates-function #'orderless-filter)
  (selectrum-highlight-candidates-function #'orderless-highlight-matches)
  :custom-face
  (selectrum-current-candidate ((t (:inherit hl-line :extend t))))
  :general
  (:keymaps 'selectrum-minibuffer-map
   "M-k" #'selectrum-previous-candidate
   "M-j" #'selectrum-next-candidate
   "C-f" #'selectrum-submit-exact-input)
  :config
  (selectrum-mode +1))
#+end_src

*** =corfu=

#+begin_src emacs-lisp :tangle yes
(use-package corfu
  :straight t
  :demand t
  :after orderless
  :custom
  (corfu-cycle t)
  (corfu-max-width 50)
  :custom-face
  (corfu-current ((t (:inherit hl-line :extend t))))
  :general
  (:keymaps 'corfu-map
   "M-k" #'corfu-previous
   "M-j" #'corfu-next)
  :config
  (corfu-global-mode +1))
#+end_src

*** =company=

Attempt #37483745 to make in-buffer completion look pretty.

#+begin_src emacs-lisp :tangle yes
(use-package company
  :straight t
  :after orderless
  :commands (company-mode company-capf--candidates)
  :preface
  (defun orderless-just-one-face (fn &rest args)
    (let ((orderless-match-faces [completions-common-part]))
      (apply fn args)))
  :delight company-mode
  :init
  (advice-add 'company-capf--candidates :around #'orderless-just-one-face)
  :hook
  (prog-mode-hook . company-mode)
  :custom
  (company-backends '(company-capf)))
#+end_src

*** =consult=

#+begin_src emacs-lisp :tangle yes
(use-package consult
  :straight t
  :general
  (:keymaps 'hcps/leader-map
   "b" #'consult-buffer
   "f b" #'consult-bookmark
   "f r" #'consult-recent-file
   "e p" #'consult-yank-pop
   "n l" #'consult-line
   "n m" #'consult-mark
   "n o" #'consult-outline
   "n g" #'consult-ripgrep
   "n G" #'consult-git-grep
   "n e" #'consult-compile-error
   "n f" #'consult-flycheck
   "n j" #'consult-goto-line))
#+end_src

*** =marginalia=

#+begin_src emacs-lisp :tangle yes
(use-package marginalia
  :straight t
  :demand t
  :after selectrum
  :custom
  (marginalia-annotators
   '(marginalia-annotators-heavy
     marginalia-annotators-light
     nil))
  :general
  (:keymaps 'minibuffer-local-map
   "M-A" #'marginalia-cycle)
  :config
  (marginalia-mode +1))
#+end_src

*** =undo-tree=

Undo and redo and kools with =undo-tree=!

#+begin_src emacs-lisp :tangle yes
(use-package undo-tree
  :defer t
  :straight t
  :delight
  :preface
  (defconst hcps/undo-tree-visualizer-diff t
    "My value for the `undo-tree-visualizer-diff' variable.")
  (defun reset-visualizer-diff (&rest _)
    "Because undo-tree-visualize sets the value of this variable to nil on quit."
    (setq undo-tree-visualizer-diff hcps/undo-tree-visualizer-diff))
  (defun wolfgang/clean-undo-tree ()
    "Clear current buffer's undo-tree."
    (interactive)
    (let ((buff (current-buffer)))
      (if (local-variable-p 'buffer-undo-tree)
          (if (y-or-n-p "Clear buffer-undo-tree? ")
              (progn
                (setq buffer-undo-tree nil)
                (message "Cleared undo-tree of buffer: %s" (buffer-name buff)))
            (message "Cancelled clearing undo-tree of buffer: %s" (buffer-name buff)))
        (error "Buffer %s has no local binding of `buffer-undo-tree'" (buffer-name buff)))))
  :hook
  ((after-init-hook . global-undo-tree-mode)
   (undo-tree-visualizer-mode-hook . hide-mode-line-mode)
   (diff-mode-hook . hcps/hide-evil-tag))
  :init
  (advice-add 'undo-tree-visualize :before #'reset-visualizer-diff)
  :custom
  (undo-tree-visualizer-timestamps t)
  (undo-tree-enable-undo-in-region nil)
  (undo-tree-auto-save-history nil)
  (undo-tree-history-directory-alist `((".*" . ,temporary-file-directory)))
  (undo-tree-visualizer-diff hcps/undo-tree-visualizer-diff)
  :general
  (:keymaps 'hcps/leader-map
   "u" #'undo-tree-visualize
   "U" #'wolfgang/clean-undo-tree))
#+end_src

*** =dashboard=

There's some utility in having a cool initial screen actually. And
there's a cool extension that provides such functionality.

#+begin_src emacs-lisp :tangle yes
(use-package dashboard
  :straight t
  :functions dashboard-mode
  :commands (dashboard-mode dashboard-insert-startupify-lists)
  :init
  (defun hcps/open-dashboard ()
    (let ((buffer (switch-to-buffer "*dashboard*")))
      (dashboard-mode)
      buffer))
  (setq-default initial-buffer-choice #'hcps/open-dashboard)
  :hook
  (dashboard-mode-hook . (lambda () (setq-local scroll-margin 0)))
  :custom
  (dashboard-banner-logo-title (format "Welcome to Emacs, %s!" current-user))
  (dashboard-set-heading-icons nil)
  (dashboard-set-file-icons nil)
  (dashboard-center-content t)
  (dashboard-page-separator "\n\n\n")
  (dashboard-startup-banner 'logo)
  (dashboard-items '((recents  . 10)
                     (bookmarks . 5)))
  :general
  (:keymaps 'dashboard-mode-map
   hcps/leader-key nil
   "j" #'widget-forward
   "k" #'widget-backward
   "m" #'dashboard-jump-to-bookmarks
   "r" #'dashboard-jump-to-recent-files)
  :config
  (dashboard-setup-startup-hook))
#+end_src

*** =treemacs=

While I've somewhat used =neotree.el=, I believe that =treemacs= is
turning out to be a better option, as it offers a bunch of extra
integrating packages and is overall more popular than the former.

#+begin_src emacs-lisp :tangle yes
(use-package treemacs
  :defer t
  :straight t
  :straight treemacs-evil
  :straight treemacs-projectile
  :init
  (advice-add 'treemacs-mode :around #'disable-scroll-margin)
  :hook
  ((treemacs-mode-hook . hide-mode-line-mode)
   (cfrs-input-mode-hook . evil-emacs-state))
  :custom
  (treemacs-persist-file (expand-file-name "treemacs/persist.org" var-user-dir))
  (treemacs-display-in-side-window t)
  (treemacs-follow-after-init t)
  (treemacs-show-cursor nil)
  (treemacs-no-png-images t)
  (treemacs-project-follow-cleanup t)
  (treemacs-sorting 'alphabetic-desc)
  (treemacs-width 25)
  :general
  ("M-0" #'treemacs-select-window
   "M-t" #'treemacs)
  :config
  (treemacs-follow-mode +1)
  (treemacs-filewatch-mode +1)
  (treemacs-fringe-indicator-mode -1)
  (require 'treemacs-evil)
  (require 'treemacs-projectile))
#+end_src

*** =exec-path-from-shell=

To ensure that Emacs uses the same path and environment as =shell= uses,
I use =exec-path-from-shell=. That way commands that work on the =shell=
will certainly work on Emacs!

#+begin_src emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :straight
  (exec-path-from-shell
   :type git
   :host github
   :repo "purcell/exec-path-from-shell")
  :init
  (setenv "SHELL" "/usr/bin/bash")
  :custom
  (exec-path-from-shell-arguments '("-l"))
  (exec-path-from-shell-variables '("PATH" "MANPATH"))
  :config
  (exec-path-from-shell-initialize))
#+end_src

*** =anzu=

Besides the =ISearch= from Emacs itself or the search function from
=evil=, I also like to use =anzu=.

#+begin_src emacs-lisp :tangle yes
(use-package anzu
  :defer t
  :straight t
  :delight
  (isearch-mode)
  (anzu-mode)
  :preface
  (defun hcps/anzu-update-func (here total)
    (when anzu--state
      (let ((status (cl-case anzu--state
                      (search (format "(%d/%d) " here total))
                      (replace-query (format "(%d replaces) " total))
                      (replace (format "(%d/%d) " here total)))))
        (propertize status 'face 'anzu-mode-line))))
  :custom
  (anzu-cons-mode-line-p t)
  (anzu-mode-line-update-function #'hcps/anzu-update-func)
  :general
  (:keymaps 'hcps/leader-map
   "e r" #'anzu-replace-at-cursor-thing
   "e q" #'anzu-query-replace-regexp)
  :config
  (global-anzu-mode 1))
#+end_src

I use only the =anzu-replace-at-cursor-thing=, which is a very useful to
replace multiple occurrences of a word fast.

*** =deadgrep=

I enjoy using =ripgrep= to search for stuff using =grep= syntax without
the slowness of it. So, I use =deadgrep=!

#+begin_src emacs-lisp :tangle yes
(use-package deadgrep
  :defer t
  :straight t
  :after evil-collection
  :general
  (:keymaps 'hcps/leader-map
   "f g" #'deadgrep)
  :config
  (evil-collection-deadgrep-setup))
#+end_src

*** =link-hint=

=link-hint= replicates the hinting mechanic from trydactil and such.

#+begin_src emacs-lisp :tangle yes
(use-package link-hint
  :defer t
  :straight t
  :custom
  (browse-url-browser-function 'browse-url-firefox)
  :general
  (:keymaps 'hcps/leader-map
   "h" #'link-hint-open-link))
#+end_src

*** =avy=

As I love some overkill, here's =avy=.

#+begin_src emacs-lisp :tangle yes
(use-package avy
  :defer t
  :straight t
  :after evil
  :custom
  (avy-styles-alist
   '((avy-goto-char-2 . post)
     (avy-goto-line   . at-full)))
  (avy-background t)
  :general
  (:states 'normal
   "s" #'avy-goto-char-2
   "S" #'avy-goto-line))
#+end_src

*** =which-key=

The package called =which-key= shows you possible completions to the
command you're typing in the mode-line.

#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :defer t
  :straight t
  :delight
  :init
  (hcps/hook-require-once pre-command-hook which-key)
  :custom
  (which-key-allow-evil-operators t)
  :config
  (which-key-mode +1))
#+end_src

*** =lsp-mode=

I imagine anyone knows what is LSP, but oh well. Basically, it is one of
the best features  of other famous editors, such as  Visual Studio Code.
By using =lsp-mode=, we'll be able to have it too!

#+begin_src emacs-lisp :tangle yes
(use-package lsp-mode
  :defer t
  :straight t
  :commands (lsp lsp-mode)
  :delight
  (lsp-mode " lsp")
  :hook
  ((lsp-mode-hook . lsp-headerline-breadcrumb-mode)
   (lsp-mode-hook . lsp-enable-which-key-integration)
   (lsp-mode-hook . corfu-mode))        ; disable corfu-mode in lsp-mode buffers
  :custom
  (lsp-log-io nil)
  (lsp-auto-guess-root t)
  (lsp-modeline-code-actions-enable t)
  (lsp-auto-configure t)
  (lsp-completion-enable t)
  (lsp-completion-provider :capf)
  (lsp-completion-show-detail nil)
  (lsp-completion-use-last-result nil)
  (lsp-completion-show-kind nil)
  (lsp-idle-delay 0.25)
  (lsp-enable-snippet nil)
  (lsp-enable-semantic-highlighting nil)
  (lsp-modeline-diagnostics-scope :project)
  ;; (lsp-keymap-prefix (concat hcps/leader-key " m l"))
  :general
  (:states '(normal visual)
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "m l" '(:wk "lsp-mode" :keymap lsp-command-map))
  :config
  (require 'projectile)
  (add-to-list 'lsp-language-id-configuration '(cuda-mode . "cuda"))
  (add-to-list 'lsp-language-id-configuration '(".*\\.cu$" . "cuda")))
#+end_src

This package does have an extra sister package: =lsp-ui=.

#+begin_src emacs-lisp :tangle yes
(use-package lsp-ui
  :straight t
  :after lsp-mode
  :custom
  (lsp-ui-doc-enable nil)
  (lsp-ui-doc-position 'bottom)
  (lsp-ui-doc-delay 2.0)
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-delay 1)
  (lsp-ui-sideline-update-mode 'line)
  (lsp-ui-sideline-show-diagnostics t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-sideline-show-code-actions nil)
  (lsp-ui-peek-enable nil))
#+end_src

*** =flycheck=

=flycheck= provides a reliable source to syntax checking in Emacs.

#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :defer t
  :straight t
  :straight pos-tip
  :straight flycheck-pos-tip
  :commands (global-flycheck-mode flycheck-mode)
  :delight
  (flycheck-mode " fc")
  :hook
  ((prog-mode-hook . flycheck-mode)
   (flycheck-mode-hook . flycheck-pos-tip-mode))
  :custom
  (flycheck-check-syntax-automatically '(save mode-enabled))
  (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
  (flycheck-display-errors-delay 1.0)
  (flycheck-idle-change-delay 1.5)
  :config
  (require 'flycheck-pos-tip))
#+end_src

*** =highlight-numbers=

This highlights numbers in =prog-mode=:

#+begin_src emacs-lisp :tangle yes
(use-package highlight-numbers
  :defer t
  :straight t
  :commands highlight-numbers-mode
  :hook
  (prog-mode-hook . highlight-numbers-mode))
#+end_src

*** =highlight-escape-sequences=

And this is to highlight escape sequences in some common modes:

#+begin_src emacs-lisp :tangle yes
(use-package highlight-escape-sequences
  :defer t
  :straight t
  :commands turn-on-hes-mode
  :preface
  (defconst hes-shell-escape-sequence-re "\\(\\\\\\([\"'?\\bfnrtv]\\)\\)"
    "Simple regex to match any common escaped character in sh-mode")
  :hook
  (prog-mode-hook . turn-on-hes-mode)
  :config
  (add-to-list 'hes-mode-alist `(sh-mode . ,hes-shell-escape-sequence-re)))
#+end_src

*** =flyspell=

Of course, =flyspell= corrects your writing!

#+begin_src emacs-lisp :tangle yes
(use-package flyspell
  :defer t
  :straight t
  :commands (flyspell-prog-mode flyspell-mode)
  :delight
  (flyspell-mode " fs")
  (flyspell-prog-mode " fs")
  :hook
  ((prog-mode-hook . flyspell-prog-mode)
   (text-mode-hook . flyspell-mode))
  :custom
  (ispell-program-name "aspell")
  (ispell-extra-args '("--sug-mode=ultra"))
  :general
  (:keymaps 'hcps/leader-map
   "d" 'ispell-change-dictionary))
#+end_src

*** =diff-hl=

=diff-hl= to highlight any diffs!

#+begin_src emacs-lisp :tangle yes
(use-package diff-hl
  :defer t
  :straight t
  :commands (diff-hl-mode turn-on-diff-hl-mode diff-hl-magit-post-refresh))
#+end_src

*** =hydra=

=hydra= is a package that allows keybindings to be activated under the
pressing of a specific combination of keys. These will then be active as
long as only them are being pressed, as on the moment a key which isn't
part of the hydra is pressed the hydra is killed and the keybindings
deactivated.

#+begin_src emacs-lisp :tangle yes
(use-package hydra
  :disabled
  :defer t
  :straight t
  :preface
  (defvar-local me/ongoing-hydra-body nil)
  (defun me/ongoing-hydra ()
    (interactive)
    (if me/ongoing-hydra-body
        (funcall me/ongoing-hydra-body)
      (user-error "me/ongoing-hydra: me/ongoing-hydra-body is not set")))
  :general
  ("C-c e" #'hydra-eyebrowse/body
   "C-c f" #'hydra-flycheck/body)
  :custom
  (hydra-default-hint nil))
#+end_src

**** Eyebrowse

#+begin_src emacs-lisp :tangle no
(with-eval-after-load 'hydra
  (defhydra hydra-eyebrowse (:color blue)
    "
^
^Eyebrowse^         ^Do^                ^Switch^
^─────────^─────────^──^────────────────^──────^────────────
_q_ quit            _c_ create          _<_ previous
^^                  _k_ kill            _>_ next
^^                  _r_ rename          _e_ last
^^                  ^^                  _s_ switch
^^                  ^^                  ^^
"
    ("q" nil)
    ("<" eyebrowse-prev-window-config :color red)
    (">" eyebrowse-next-window-config :color red)
    ("c" eyebrowse-create-window-config)
    ("e" eyebrowse-last-window-config)
    ("k" eyebrowse-close-window-config :color red)
    ("r" eyebrowse-rename-window-config)
    ("s" eyebrowse-switch-to-window-config))

  (with-eval-after-load 'general
    (general-def '(global-map special-mode-map)
      "C-c e" 'hydra-eyebrowse/body)))
#+end_src

**** Flycheck

#+begin_src emacs-lisp :tangle no
(with-eval-after-load 'hydra
  (defhydra hydra-flycheck (:color pink)
    "
^
^Flycheck^          ^Errors^            ^Checker^
^────────^──────────^──────^────────────^───────^───────────
_q_ quit            _<_ previous        _?_ describe
_m_ manual          _>_ next            _d_ disable
_v_ verify setup    _f_ check           _s_ select
^^                  _l_ list            ^^
^^                  ^^                  ^^
"
    ("q" nil)
    ("<" flycheck-previous-error)
    (">" flycheck-next-error)
    ("?" flycheck-describe-checker :color blue)
    ("d" flycheck-disable-checker :color blue)
    ("f" flycheck-buffer)
    ("l" flycheck-list-errors :color blue)
    ("m" flycheck-manual :color blue)
    ("s" flycheck-select-checker :color blue)
    ("v" flycheck-verify-setup :color blue))

  (with-eval-after-load 'general
    (general-def '(global-map special-mode-map)
      "C-c f" 'hydra-flycheck/body)))
#+end_src

*** =ace-window=

=ace-window= creates labels so we can jump windows with precision:

#+begin_src emacs-lisp :tangle yes
(use-package ace-window
  :defer t
  :straight t
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  :general
  (:keymaps 'hcps/leader-map
   "w o" #'ace-window))
#+end_src

*** =super-save=

=super-save= auto-saves buffers when you switch or close buffers or when
Emacs loses focus, etc.

#+begin_src emacs-lisp :tangle yes
(use-package super-save
  :defer t
  :straight t
  :delight
  :init
  (hcps/hook-require-once before-save-hook super-save)
  :custom
  (super-save-auto-save-when-idle t)
  (super-save-remote-files nil)
  (super-save-idle-duration 60)
  :config
  (add-to-list 'super-save-triggers #'ace-window)
  (super-save-mode +1))
#+end_src

*** =yasnippet=

I use =yasnippet= to handle my snippet needs.

#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :defer t
  :straight t
  :delight
  (yas-minor-mode " ys")
  :commands (yas-minor-mode yas-expand-snippet yas-lookup-snippet)
  :preface
  (defun hcps/get-pretty-source-path (path)
    (replace-regexp-in-string
     ".*\\(?:src\\|source\\|include\\|inc\\)/\\(.+\\)$" "\\1"
     path))
  (defun hcps/get-pretty-include-guard (path)
    (concat
     "_"
     (upcase (replace-regexp-in-string "[/.]" "_" (hcps/get-pretty-source-path path)))
     "_"))
  :init
  (add-to-list 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
  :hook
  (html-mode-hook . yas-minor-mode)
  :custom
  (yas-snippet-dirs `(,(expand-file-name "snippets" root-dir)))
  :config
  (general-def 'insert 'yas-minor-mode-map
    "<tab>" yas-maybe-expand)
  (yas-reload-all)
  (yas-load-directory auto-insert-directory))
#+end_src

*** =vimish-fold=

Enables vim-like folding of regions.

#+begin_src emacs-lisp :tangle yes
(use-package vimish-fold
  :defer t
  :straight t
  :general
  (:keymaps 'vimish-fold-folded-keymap
   "C-<tab>" #'vimish-fold-unfold)
  (:keymaps 'vimish-fold-unfolded-keymap
   "C-<tab>" #'vimish-fold-refold)
  :custom
  (vimish-fold-header-width 79)
  :config
  (vimish-fold-global-mode 1))
#+end_src

*** =projectile=

For project management in Emacs, there's no better choice than
=projectile=, which is widely loved by the community.

It supports project-wide commands and actions, like killing all project
buffers or searching the whole project and replacing something.

#+begin_src emacs-lisp :tangle yes
(use-package projectile
  :defer t
  :straight t
  :commands projectile-mode
  :preface
  (defun hcps/projectile-custom-mode-line ()
    "Report project name and type in the modeline."
    (let ((project (downcase (projectile-project-name))))
      (unless (or (string-equal project "-") (string-empty-p project))
        (format "%s:%s" projectile-mode-line-prefix project))))
  :custom
  (projectile-completion-system 'default)
  (projectile-mode-line-prefix " pj")
  (projectile-mode-line-function #'hcps/projectile-custom-mode-line)
  (projectile-switch-project-action 'projectile-find-file)
  (projectile-find-dir-includes-top-level t)
  (projectile-enable-caching t)
  (projectile-files-cache-expire nil)
  (projectile-indexing-method 'hybrid)
  (projectile-project-search-path '("~/Repositories/"))
  (projectile-project-root-files-top-down-recurring
   '(".projectile" "compile_commands.json" ".ccls" ".svn" "CVS" "Makefile"))
  (projectile-globally-ignored-file-suffixes
   '(".elc" ".pyc" ".o" "~" ".so"))
  (projectile-globally-ignored-files
   '(".DS_Store" "Icon" "TAGS" "__PYCACHE__"))
  (projectile-globally-ignored-directories
   '(".DS_Store" "__PYCACHE__" ".idea" ".ensime_cache"
     ".eunit" ".git" ".hg" ".fslckout" "_FOSSIL_" ".bzr" "_darcs"
     ".tox" ".svn" ".stack-work" ".clangd" ".vscode" ".cache"))
  :general
  (:states '(normal visual)
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "p" '(:wk "projectile" :keymap projectile-command-map))
  :config
  ;; clean dead projects when Emacs is idle
  (run-with-idle-timer 180 nil #'projectile-cleanup-known-projects)
  ;; enable projectile mode
  (projectile-mode))
#+end_src

And, as a further integration of =ivy= and =projectile=, there is a
package that makes actions such as =switch-project= to use =counsel='s
completion and ordering of results.

#+begin_src emacs-lisp :tangle no
(use-package counsel-projectile
  :after (projectile counsel)
  :straight t
  :config
  (counsel-projectile-mode))
#+end_src

*** =magit=

Obviously, any configuration file that says it deserves *any* respect
should feature =magit=, as it is, hands down, the best =git= front-end
in the visible universe, nay, in the whole multiverse.

#+begin_src emacs-lisp :tangle yes
(use-package magit
  :defer t
  :straight t
  :hook
  ((after-save-hook . magit-after-save-refresh-status)
   (magit-pre-display-buffer-hook . evil-emacs-state)
   (magit-mode-hook . hcps/hide-evil-tag)
   (git-commit-mode-hook . evil-emacs-state)
   (magit-file-mode-hook . diff-hl-mode)
   (magit-post-refresh-hook . diff-hl-magit-post-refresh))
  :preface
  ;; easy on-off for the following function
  (defcustom magit-push-protected-branch nil
    "When set, ask for confirmation before pushing to this branch (e.g. master)."
    :type 'string
    :safe #'stringp
    :group 'magit)
  ;; are you sure you wanna push to master?
  (defun magit-push--protected-branch (magit-push-fun &rest args)
    "Ask for confirmation before pushing a protected branch."
    (if (equal magit-push-protected-branch (magit-get-current-branch))
        ;; Arglist is (BRANCH TARGET ARGS)
        (if (yes-or-no-p (format "Push branch %s? " (magit-get-current-branch)))
            (apply magit-push-fun args)
          (error "Push aborted by user"))
      (apply magit-push-fun args)))
  :init
  (advice-add 'magit-push-current-to-pushremote
              :around #'magit-push--protected-branch)
  (advice-add 'magit-push-current-to-upstream
              :around #'magit-push--protected-branch)
  :custom
  (git-commit-major-mode 'text-mode)
  (magit-push-protected-branch "master")
  (magit-save-repository-buffers 'dontask)
  (magit-refs-show-commit-count 'all)
  (magit-log-buffer-file-locked t)
  (magit-revision-show-gravatars nil)
  (magit-bury-buffer-function 'magit-mode-quit-window)
  :general
  (:keymaps 'hcps/leader-map
   "g p" #'magit-list-repositories
   "g g" #'magit-status
   "g d" #'magit-dispatch
   "g f" #'magit-file-dispatch
   "g l" #'magit-log
   "g b" #'magit-blame)
  (:keymaps '(magit-log-mode-map magit-diff-mode-map magit-status-mode-map)
   :states 'emacs
   "j" #'magit-next-line
   "k" #'magit-previous-line)
  (:keymaps 'magit-status-mode-map
   :states 'emacs
   "K" #'magit-discard
   "l" #'magit-log
   "h" #'magit-diff-toggle-refine-hunk))
#+end_src

*** =git-timemachine=

Also, =git-timemachine= is a beautiful way to walk through git history:

#+begin_src emacs-lisp :tangle yes
(use-package git-timemachine
  :after magit
  :straight t
  :hook
  (git-timemachine-mode-hook . evil-normalize-keymaps)
  :general
  (:states '(normal visual)
   :keymaps 'git-timemachine-mode-map
   "q" #'git-timemachine-quit
   "w" #'git-timemachine-kill-abbreviated-revision
   "g" #'git-timemachine-show-nth-revision
   "c" #'git-timemachine-show-commit
   "C-j" #'git-timemachine-show-next-revision
   "C-k" #'git-timemachine-show-previous-revision)
  (:keymaps 'hcps/leader-map
   "g t" #'git-timemachine)
  :config
  (evil-make-overriding-map git-timemachine-mode-map 'normal))
#+end_src

*** =expand-region=

Increase region by semantic units. It tries to be smart about it and
adapt to the structure of the current major mode.

#+begin_src emacs-lisp :tangle yes
(use-package expand-region
  :defer t
  :straight t
  :general
  ("C-+" #'er/contract-region
   "C-=" #'er/expand-region))
#+end_src

*** =smartparens=

When in need of smart pairing, look no further than =smartparens=!

#+begin_src emacs-lisp :tangle yes
(use-package smartparens
  :defer t
  :straight t
  :delight (smartparens-mode " sp")
  :commands (smartparens-mode smartparens-strict-mode)
  :custom
  (sp-base-key-bindings 'paredit)
  (sp-autoskip-closing-pair 'always)
  (sp-hybrid-kill-entire-symbol nil)
  :config
  (require 'smartparens-config)
  (sp-use-paredit-bindings)
  (show-smartparens-global-mode +1))
#+end_src

*** =rainbow-delimiters=

With that, =rainbow-delimiters= is a great match:

#+begin_src emacs-lisp :tangle yes
(use-package rainbow-delimiters
  :defer t
  :straight t
  :commands rainbow-delimiters-mode)
#+end_src

*** =beacon=

This little add-on will highlight big cursor movements.

#+begin_src emacs-lisp :tangle yes
(use-package beacon
  :defer t
  :straight t
  :init
  (hcps/hook-require-once pre-command-hook beacon)
  :delight
  :config
  (beacon-mode +1))
#+end_src

*** =aggressive-indent=

I use =aggressive-indent= to keep my code indented as I type.

#+begin_src emacs-lisp :tangle yes
(use-package aggressive-indent
  :defer t
  :straight t
  :commands aggressive-indent-mode
  :preface
  (defun me/aggressive-indent-mode-off ()
    (aggressive-indent-mode 0))
  :custom
  (aggressive-indent-comments-too t)
  :config
  (add-to-list 'aggressive-indent-protected-commands 'comment-dwim))
#+end_src

*** =highligh-indent-guides=

Also =highligh-indent-guides= is very useful, as Emacs doesn't come with
it out of the box.

#+begin_src emacs-lisp :tangle yes
(use-package highlight-indent-guides
  :defer t
  :straight t
  :delight
  (highlight-indent-guides-mode)
  :commands
  (highlight-indent-guides-auto-set-faces highlight-indent-guides-mode)
  :preface
  (defun highlight-indent-guides-auto-set-faces-with-frame (frame)
    (with-selected-frame frame
      (highlight-indent-guides-auto-set-faces)))
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-responsive 'stack)
  (highlight-indent-guides-character ?|)
  (highlight-indent-guides-delay 0.05)
  (highlight-indent-guides-auto-odd-face-perc 5)
  (highlight-indent-guides-auto-even-face-perc 5)
  (highlight-indent-guides-auto-character-face-perc 10)
  :hook
  ((prog-mode-hook . highlight-indent-guides-mode)
   (after-make-frame-functions . highlight-indent-guides-auto-set-faces-with-frame)))
#+end_src

*** =helpful=

=helpful= is a package that is overall an improvement over the default
=help= windows.

#+begin_src emacs-lisp :tangle yes
(use-package helpful
  :straight t
  :general
  (:keymaps '(global-map special-mode-map)
   "C-h F" #'helpful-function
   "C-h C" #'helpful-command
   "C-h M" #'helpful-macro
   [remap describe-key] #'helpful-key
   [remap describe-variable] #'helpful-variable
   [remap describe-function] #'helpful-callable))
#+end_src

*** =engine-mode=

=engine-mode= is a minor mode that allow you to easily make queries to
the web without leaving Emacs.

#+begin_src emacs-lisp :tangle yes
(use-package engine-mode
  :disabled
  :defer t
  :straight t
  :config
  (engine-mode +1)
  ;; (defengine google
  ;;   "https://www.google.com/search?q="
  ;;   :keybinding "g")
  )
#+end_src

*** =openwith=

=openwith= is a small and useful tool to set how you want to open your
files with Emacs. I use it to set the opener of pdfs in my Emacs, as
well to other diverse media files.

#+begin_src emacs-lisp :tangle yes
(use-package openwith
  :defer t
  :straight t
  :init
  (hcps/hook-require-once pre-command-hook openwith)
  :custom
  (openwith-associations
   '(("\\.pdf$" "zathura" (file))
     ;; ("\\.jpe?g$" "sxiv" (file))
     ;; ("\\.png$" "sxiv" (file))
     ;; ("\\.svg$" "sxiv" (file))
     ;; ("\\.jpeg$" "sxiv" (file))
     ;; ("\\.bmp$" "sxiv" (file))
     ("\\.flac$" "mpv" (file))
     ("\\.mkv$" "mpv" (file))
     ("\\.mp3$" "mpv" (file))
     ("\\.mp4$" "mpv" (file))))
  (openwith-confirm-invocation nil)
  :config
  (openwith-mode +1))
#+end_src

*** =crux=

Which stands for...

#+begin_quote
A Collection of Ridiculously Useful eXtensions for Emacs.
#+end_quote

... yeah.

#+begin_src emacs-lisp :tangle yes
(use-package crux
  :defer t
  :straight t
  :delight
  (crux-reopen-as-root-mode)
  :commands
  (crux-reopen-as-root-mode crux-reopen-as-root crux-with-region-or-buffer)
  :init
  ;; supposedly get expanded at compile time
  ;; also don't need to be here, but where else should i put them?
  (defadvice indent-region
      (before with-region-or-buffer activate compile)
    (interactive
     (if mark-active
         (list
          (region-beginning)
          (region-end))
       (list
        (point-min)
        (point-max)))))

  (defadvice eval-region
      (before with-region-or-buffer activate compile)
    (interactive
     (if mark-active
         (list
          (region-beginning)
          (region-end))
       (list
        (point-min)
        (point-max)))))

  (defadvice untabify
      (before with-region-or-buffer activate compile)
    (interactive
     (if mark-active
         (list
          (region-beginning)
          (region-end))
       (list
        (point-min)
        (point-max)))))
  :hook
  (find-file-hook . crux-reopen-as-root)
  :general
  (:keymaps 'hcps/leader-map
   ;; file stuff
   "f s" #'crux-sudo-edit
   "f m" #'crux-rename-buffer-and-file ;; as in `move'
   "f d" #'crux-delete-buffer-and-file
   "f c" #'crux-find-user-custom-file
   "f n" #'crux-create-scratch-buffer
   "f i" #'crux-find-user-init-file))
#+end_src

*** =page-break-lines=

To make pretty page breaks in your Emacs buffers:

#+begin_src emacs-lisp :tangle yes
(use-package page-break-lines
  :defer t
  :straight t
  :commands page-break-lines-mode
  :delight
  :hook
  ((prog-mode-hook . page-break-lines-mode)
   (text-mode-hook . page-break-lines-mode))
  :custom
  (page-break-lines-max-width (+ fill-column 10))
  (page-break-lines-char ?-)
  :custom-face
  (page-break-lines ((t :inherit font-lock-comment-face :bold nil :italic nil))))
#+end_src

*** =writeroom-mode=

A nice writing environment for Emacs in a minor-mode.

#+begin_src emacs-lisp :tangle yes
(use-package writeroom-mode
  :defer t
  :straight t
  :straight visual-fill-column
  :custom
  (writeroom-fullscreen-effect 'maximized)
  (writeroom-width (+ 3 fill-column))
  :general
  (:keymaps 'hcps/leader-map
   "v w" #'writeroom-mode))
#+end_src

*** =ssh=

Here's a small package that allows remotely opening sessions.

#+begin_src emacs-lisp :tangle yes
(use-package ssh
  :defer t
  :after shell
  :straight t
  :preface
  (defcustom ssh-remote-user-server nil
    "Dummy variable that holds a server name."
    :type 'string
    :safe #'stringp
    :group 'ssh)
  (defun hcps/get-user-server ()
    "Call to set and print the user server."
    (interactive)
    (if (equal ssh-remote-user-server nil)
        (setq ssh-remote-user-server
              (read-from-minibuffer "What server to store: ")))
    (concat "/ssh:" ssh-remote-user-server ":"))
  (defun hcps/store-user-remote ()
    "Store a server name to the desired target."
    (interactive)
    (let* ((read-server (read-from-minibuffer
                         (format "What server to store (current: %s): " ssh-remote-user-server)))
           (server-to-connect (if (equal read-server "") ssh-remote-user-server read-server)))
      (setq ssh-remote-user-server server-to-connect)))
  :custom
  (shell-command-dont-erase-buffer t)
  (ssh-directory-tracking-mode t)
  :config
  (shell-dirtrack-mode t))
#+end_src

*** =ligature.el=

Obscure but nice way to enable ligature fonts.

#+begin_src emacs-lisp :tangle yes
(use-package ligature
  :straight
  (ligature
   :type git
   :host github
   :repo "mickeynp/ligature.el")
  :config
  (ligature-set-ligatures 't '("www"))
  ;; enable Iosevka ligatures in programming modes
  (ligature-set-ligatures
   'prog-mode
   '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->"
     "<--->" "<---->" "<!--" "<==" "<===" "<=" "=>" "=>>" "==>"
     "===>" ">=" "<=>" "<==>" "<===>" "<====>" "<!---" "<~~"
     "<~" "~>" "~~>" "::" ":::" "==" "!=" "===" "!==" ":=" ":-"
     ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "+:" "-:" "=:"
     "<******>" "++" "+++"))
  (global-ligature-mode +1))
#+end_src

*** =emacs-vterm=

So we have an usable terminal inside emacs that doesn't blow up at the
slightest stress.

#+begin_src emacs-lisp :tangle yes
(use-package vterm
  :defer t
  :straight t
  :preface
  (defun hcps-custom-vterm-setup ()
    "This is necessary as I need to pass parameters to those function
calls below and a bunch of lambdas isn't exactly pretty."
    (setq-local
     evil-move-cursor-back nil
     evil-default-state 'emacs
     buffer-face-mode-face '(:family "Unifont" :height 120))
    (buffer-face-mode +1)
    (hl-line-mode -1))
  :hook
  ((vterm-mode-hook . hcps-custom-vterm-setup)
   (vterm-mode-hook . evil-emacs-state))
  :custom
  (vterm-ignore-blink-cursor t))
#+end_src

*** =mixed-pitch-mode=

So we don't trouble ourselves with setting which fonts should be fixed
and which should be variable.

#+begin_src emacs-lisp :tangle yes
(use-package mixed-pitch
  :straight t
  :defer t
  :delight
  (mixed-pitch-mode " mp")
  :hook
  (text-mode-hook . mixed-pitch-mode)
  :custom-face
  (variable-pitch ((t (:font "Iosevka Aile" :weight light)))))
#+end_src

*** =hl-todo=

Pretty =TODO= highlighting :)

#+begin_src emacs-lisp :tangle yes
(use-package hl-todo
  :straight t
  :defer t
  :hook
  (prog-mode-hook . hl-todo-mode))
#+end_src

** Theme

Here I define the theme that I use, which is =gruvbox=, as it provides
nice support for a lot of packages and is very pleasant for the eyes.

- [ ] Use [[https://gitlab.com/jjzmajic/ewal][this]].

#+begin_src emacs-lisp :tangle yes
(use-package gruvbox-theme
  :straight t
  :config
  (load-theme 'gruvbox-dark-medium t))
#+end_src

* File modes

Here I'll store any package load and configurations related to languages
and file types.

I still need to add packages relating to these languages:

- [ ] Scala
- [X] Dot (using Graphviz)
- [ ] English (as in literal english)
- [ ] Coq (yes, I'm slowly turning into what I most hate (check the hrs config!))
- [X] PKGBUILD
- [X] Markdown
- [ ] prog-mode
- [ ] text-mode
- [X] bison-mode

** Org

=org-mode= is probably *the* killer mode and one of the main reasons as to
why anyone should try Emacs.

*Important links*:
- [[https://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/]]
- [[https://doc.norang.ca/org-mode.html#AgendaSetup]]
- [[https://joshrollinswrites.com/help-desk-head-desk/2020-07-16/]]
- [[https://blog.jethro.dev/posts/capturing_inbox/]]

#+begin_src emacs-lisp :tangle yes
(use-package org
  :defer t
  :straight t
  :mode ("\\.org\\'" . org-mode)
  :delight
  (org-indent-mode nil org-indent)
  :hook
  ((org-mode-hook . auto-fill-mode)
   (org-mode-hook . hes-mode)
   (org-mode-hook . yas-minor-mode)
   (org-mode-hook . flycheck-mode)
   (org-mode-hook . eldoc-mode)
   (org-mode-hook . visual-line-mode)
   (org-mode-hook . (lambda () (whitespace-toggle-options 'lines-tail)))
   (org-log-buffer-setup-hook . evil-emacs-state)
   (org-log-buffer-setup-hook . hcps/hide-evil-tag))
  :custom
  (org-return-follows-link t)
  ;; the following used to be '(latex script entities)
  (org-highlight-latex-and-related nil)
  (org-hide-leading-stars t)
  (org-hide-emphasis-markers t)
  (org-support-shift-select nil)
  (org-link-descriptive t)
  (org-log-done 'note)
  (org-directory (expand-file-name "Org" onedrive-user-dir))
  (org-cycle-emulate-tab 'exc-hl-bol)
  (org-use-property-inheritance nil)
  (org-startup-indented t)
  (org-startup-folded t)
  (org-fontify-done-headline t)
  (org-fontify-todo-headline t)
  ;; 10 pixels because default-font-width doesn't work with daemon mode
  (org-image-actual-width (round (* 10 fill-column 0.85)))
  (org-display-remote-inline-images 'download)
  (org-modules
   '(ol-w3m ol-bbdb ol-bibtex ol-docview ol-gnus ol-info ol-irc ol-mhe ol-rmail ol-eww org-tempo org-inlinetask org-indent))
  ;; logging stuff
  (org-tag-alist
   '(("noexport" . ?e)
     ("ignore" . ?i)
     ("TOC" . ?t)
     ("DEPRECATED" . ?d)
     ("NOTE" . ?n)
     ("WIP" . ?g)
     ("PERSONAL" . ?p)
     ("MEETING" . ?m)
     ("REFILE" . ?f)
     ("REPEAT" . ?r)
     ("UNI" . ?u)
     ("WORK" . ?w)
     ("URGENT" . ?a)))
  (org-todo-keywords '((sequence "TODO(t)" "STARTED(s!)" "|" "DONE(d!)")
                       (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
  (org-log-into-drawer t)
  (org-effort-property "EFFORT")
  (org-global-properties
   `((,(concat org-effort-property "_ALL") . "0 1 2 3 4 5 6 7 8 9 10")))
  :general
  (:states '(normal visual)
   :keymaps 'org-mode-map
   "t" #'org-todo              ; mark a TODO item as DONE
   "$" #'org-end-of-line       ; smarter behaviour on headlines etc.
   "0" #'org-beginning-of-line ; ditto
   "-" #'org-ctrl-c-minus      ; change bullet style
   "<" #'org-metaleft          ; outdent
   ">" #'org-metaright         ; indent
   "M-h" #'org-do-promote
   "M-l" #'org-do-demote
   "M-H" #'org-promote-subtree
   "M-L" #'org-demote-subtree
   "C-i" #'org-toggle-inline-images
   "C-l" #'org-toggle-link-display
   "C-j" #'outline-next-visible-heading
   "C-k" #'outline-previous-visible-heading
   "C-S-k" #'outline-up-heading
   "<tab>" #'outline-toggle-children
   "<backtab>" #'org-global-cycle
   "<return>" #'org-open-at-point
   "<S-left>" nil
   "<S-right>" nil
   "<S-up>" nil
   "<S-down>" nil)
  (:states '(normal visual)
   :keymaps 'org-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "v n s" #'org-narrow-to-subtree
   "v n b" #'org-narrow-to-block
   "m g" #'consult-org-heading
   "m t" #'org-set-tags-command
   "m f" #'org-set-effort
   "m d" #'org-deadline
   "m h" #'org-schedule
   "m o" #'org-priority
   "m p" #'org-set-property
   "m s" #'org-match-sparse-tree
   "m i" #'org-insert-link)
  (:keymaps 'hcps/leader-map
   "o b" #'org-switchb)
  (:states 'insert
   :keymaps 'org-mode-map
   "<tab>" #'org-cycle)
  :config
  ;; set all Org headings as Iosevka Etoile
  (dolist (face '(org-level-1
                  org-level-2
                  org-level-3
                  org-level-4
                  org-level-5
                  org-level-6
                  org-level-7
                  org-level-8))
    (set-face-attribute face nil :font "Iosevka Etoile" :weight 'regular)))
#+end_src

*** Add-ons

Stuff that increases the capabilities of =org-mode=

**** =toc-org=

With it I also use =toc-org=, which is an useful way to automatically
maintain an updated table of contents of your =.org= file. [[https://github.com/snosov1/toc-org][Check it out!]]

#+begin_src emacs-lisp :tangle yes
(use-package toc-org
  :defer t
  :straight t
  :hook
  (org-mode-hook . toc-org-mode)
  :custom
  (toc-org-max-depth 3)
  (toc-org-hrefify-default "org"))
#+end_src

**** =org-appear=

Makes the emphasis markers magically show up when you hover those words!

#+begin_src emacs-lisp :tangle yes
(use-package org-appear
  :straight t
  :hook
  (org-mode-hook . org-appear-mode))
#+end_src

**** =org-ref=

[[https://github.com/jkitchin/org-ref][org-ref]] is the de-facto way to cite inside Emacs, as it supports
multiple export backends and such

#+begin_src emacs-lisp :tangle yes
(use-package org-ref
  :defer t
  :straight t
  :preface
  (defconst hcps/user-org-ref-path
    (expand-file-name "Documentos/Papers" onedrive-user-dir))
  :custom
  (org-ref-bibliography-notes (expand-file-name "notes.org" hcps/user-org-ref-path))
  (org-ref-default-bibliography `(,(expand-file-name "references.bib" hcps/user-org-ref-path)))
  (reftex-default-bibliography `(,(expand-file-name "references.bib" hcps/user-org-ref-path)))
  (org-ref-pdf-directory hcps/user-org-ref-path)
  (org-ref-completion-library 'org-ref-ivy-cite)
  (org-ref-insert-cite-function 'org-ref-ivy-insert-cite-link)
  (org-ref-insert-label-function 'org-ref-ivy-insert-label-link)
  (org-ref-insert-ref-function 'org-ref-ivy-insert-ref-link)
  (org-ref-show-broken-links nil)
  :general
  (:states '(normal visual)
   :keymaps 'org-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "m c" #'org-ref-cite-hydra/body)
  :config
  (require 'doi-utils))
#+end_src

**** =org-agenda=

The ultimate journaling tool of the ultimate note-taking tool.

#+begin_src emacs-lisp :tangle yes
(use-package org-agenda
  :straight (:type built-in)
  :defer t
  :preface
  (defun hcps/open-agenda ()
    "Opens my custom org-agenda command."
    (interactive)
    (org-agenda nil " "))
  (defun hcps/goto-inbox ()
    "Open the organizer file."
    (interactive)
    (find-file (expand-file-name "organizer.org" org-directory)))
  :hook
  (org-agenda-mode-hook . hcps/hide-evil-tag)
  :custom
  (org-columns-default-format
   "%20CATEGORY(FILE) %35ITEM(TASK) %PRIORITY(P) %EFFORT(E) %DEADLINE(D) %TAGS(T)")
  (org-agenda-files
   (append (directory-files-recursively (expand-file-name "Org" onedrive-user-dir) "\\.org\\'")
           (directory-files-recursively proj-user-dir "^hcps[[:alnum:]-]*\\.org\\'")))
  (org-agenda-start-with-log-mode t)
  (org-agenda-use-tag-inheritance t)
  (org-agenda-block-separator nil)
  (org-agenda-view-columns-initially t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-log-mode-items '(clock closed))
  (org-agenda-custom-commands
   `((" " "Agenda"
      ((agenda ""
               ((org-agenda-span 'week)
                (org-deadline-warning-days 0)))
       (todo "STARTED"
             ((org-agenda-overriding-header "IN PROGRESS")
              (org-agenda-block-separator ?-)))
       (tags "URGENT"
             ((org-agenda-overriding-header "URGENT TASKS")))
       (tags "UNI"
             ((org-agenda-overriding-header "UNI STUFF")))
       (todo "TODO"
             ((org-agenda-overriding-header "PROJECTS")
              (org-agenda-files ',(directory-files-recursively proj-user-dir "^hcps[[:alnum:]-]*\\.org\\'"))))
       (tags "REFILE"
             ((org-agenda-overriding-header "TO REFILE")
              (org-agenda-files '(,(expand-file-name "Org/organizer.org" onedrive-user-dir)))))))))
  :general
  (:keymaps 'hcps/leader-map
   "o a" #'hcps/open-agenda
   "o i" #'hcps/goto-inbox))
#+end_src

**** =org-journal=

=org-journal= is a powerful tool to journal your day.

#+begin_src emacs-lisp :tangle yes
(use-package org-journal
  :defer t
  :straight t
  :custom
  (org-journal-dir (format-time-string (expand-file-name "Org/Journal/%Y" onedrive-user-dir)))
  (org-journal-file-type 'monthly)
  (org-journal-file-format "%Y%m")
  (org-journal-date-format "%e %b %Y (%A)")
  (org-journal-time-format "")
  :general
  (:keymaps 'hcps/leader-map
   "o j" #'org-journal-new-entry)
  :config
  (evil-initial-state 'org-journal-mode 'insert))
#+end_src

**** =org-capture=

It is built-in and it is beautiful.

#+begin_src emacs-lisp :tangle yes
(use-package org-capture
  :straight (:type built-in)
  :defer t
  :commands (org-capture-mode org-capture-upgrade-templates)
  :preface
  (defconst org-main-notes-file (expand-file-name "Org/organizer.org" onedrive-user-dir)
    "File that I use to store notes before reviewing them.")
  :hook
  (org-capture-mode-hook . evil-insert-state)
  :custom
  (org-default-notes-file org-main-notes-file)
  (org-capture-templates
   `(("t" "todo" entry (file+headline ,org-main-notes-file "Inbox")
      "* TODO %? :REFILE:\nDEADLINE: %^T\n%U\n"
      :empty-lines 1 :kill-buffer t)
     ("n" "note" entry (file+headline ,org-main-notes-file "Inbox")
      "* %? :NOTE:REFILE:\n%U\n"
      :empty-lines 1 :kill-buffer t)
     ("m" "meeting" entry (file+headline ,org-main-notes-file "Inbox")
      "* %? :MEETING:REFILE:\nSCHEDULED: %^{Meeting date?}T\n%U\n"
      :empty-lines 1 :kill-buffer t)))
  :general
  (:keymaps 'hcps/leader-map
   "o c" #'org-capture))
#+end_src

**** =org-id=

Apparently this doesn't get loaded with =org= by default?

#+begin_src emacs-lisp :tangle yes
(use-package org-id
  :after org
  :straight (:type built-in)
  :custom
  (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
  (org-id-locations-file-relative t))
#+end_src

**** =org-attach=

Configurations related to this feature in specific

#+begin_src emacs-lisp :tangle yes
(use-package org-attach
  :after org
  :straight (:type built-in)
  :custom
  (org-attach-use-inheritance 'selective)
  (org-attach-dir-relative t)
  (org-attach-id-dir "attach/")
  (org-attach-id-to-path-function-list
   '(org-attach-id-ts-folder-format org-attach-id-uuid-folder-format))
  (org-attach-preferred-new-method 'id)
  :general
  (:states '(normal visual)
   :keymaps 'org-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "m a" #'org-attach))
#+end_src

**** =org-refile=

As of Org 9.4, there is a =org-refile.el=!

#+begin_src emacs-lisp :tangle yes
(use-package org-refile
  :after org
  :straight (:type built-in)
  :custom
  (org-refile-use-outline-path t)
  (org-refile-allow-creating-parent-nodes 'confirm)
  (org-refile-targets '((org-agenda-files :maxlevel . 1)))
  :general
  (:states '(normal visual)
   :keymaps 'org-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "m r" #'org-refile))
#+end_src

*** Export

Configurations relating all the numerous org exporters.

#+begin_src emacs-lisp :tangle yes
(use-package ox
  :after org
  :straight (:type built-in)
  :straight htmlize
  :preface
  (defun org-export-output-file-name-modified (orig-fun extension &optional subtreep pub-dir)
    "Collect all generated files from an export in a neat folder."
    (unless pub-dir
      (setq pub-dir "org-exports")
      (unless (file-directory-p pub-dir)
        (make-directory pub-dir)))
    (apply orig-fun extension subtreep pub-dir nil))
  :init
  (advice-add 'org-export-output-file-name
              :around #'org-export-output-file-name-modified)
  (advice-add 'org-export-dispatch
              :around #'disable-scroll-margin)
  :custom
  (org-export-backends '(latex html ascii))
  (org-export-exclude-tags '("noexport" "NOEXPORT"))
  (org-export-allow-bind-keywords t)
  (org-export-with-latex t)
  (org-export-babel-evaluate t)
  (org-export-in-background nil)
  (org-export-snippet-translation-alist
   '(("b" . "beamer")
     ("l" . "latex")
     ("h" . "html")
     ("o" . "odt")))
  :general
  (:states '(normal visual)
   :keymaps 'org-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "m e" #'org-export-dispatch)
  :config
  (require 'org-ref))
#+end_src

**** =ox-extra=

=ox-extra= defines a couple of cool extras, like =ignore-headlines=!

#+begin_src emacs-lisp :tangle yes
(use-package ox-extra
  :disabled
  :after ox
  :straight (:type built-in)
  :hook
  ((org-export-filter-parse-tree-functions . org-export-ignore-headlines)
   (org-export-before-parsing-hook . org-latex-header-blocks-filter)))
#+end_src

**** =ox-latex=

Configurations to the LaTeX org exporter.

#+begin_src emacs-lisp :tangle yes
(use-package ox-latex
  :after ox
  :straight (:type built-in)
  :custom
  (org-latex-image-default-width "1\\linewidth")
  (org-latex-packages-alist
   '(("cache=false,outputdir=org-exports" "minted")
     ("T1" "fontenc")
     ("" "placeins")))
  (org-latex-listings 'minted)
  (org-latex-minted-options
   '(("breaklines")
     ("breakafter" "d")
     ("linenos" "true")
     ("xleftmargin" "\\parindent")))
  (org-latex-pdf-process
   '("latexmk -pdfxelatex='xelatex -shell-escape -interaction=nonstopmode' -f -xelatex -outdir=%o %f"))
  :config
  (add-to-list 'org-latex-classes
               '("iiufrgs"
                 "\\documentclass{iiufrgs}"
                 ("\\chapter{%s}"       . "\\chapter*{%s}")
                 ("\\section{%s}"       . "\\section*{%s}")
                 ("\\subsection{%s}"    . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}"     . "\\paragraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("newlfm"
                 "\\documentclass{newlfm}"
                 ("\\chapter{%s}"       . "\\chapter*{%s}")
                 ("\\section{%s}"       . "\\section*{%s}")
                 ("\\subsection{%s}"    . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  (add-to-list 'org-latex-classes
               '("IEEEtran"
                 "\\documentclass{IEEEtran}"
                 ("\\section{%s}"       . "\\section*{%s}")
                 ("\\subsection{%s}"    . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}"     . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}"  . "\\subparagraph*{%s}"))))
#+end_src

**** =ox-hugo=

To the oh-so-pretty Hugo markdown format!

#+begin_src emacs-lisp :tangle yes
(use-package ox-hugo
  :straight t
  :after ox)
#+end_src

**** =ox-twbs=

Twitter bootstrap htmls!

#+begin_src emacs-lisp :tangle yes
(use-package ox-twbs
  :straight t
  :after ox)
#+end_src

**** =ox-dnd=

Yeah. That's right.

I mean, it's basically a tool to interface with the D&D LaTeX class. Not
that nerdy, is it?

#+begin_src emacs-lisp :tangle yes
(use-package ox-dnd
  :after ox
  :straight nil
  :load-path (lambda () (expand-file-name "emacs-org-dnd" vendor-user-dir)))
#+end_src

**** =ox-beamer=

To export pretty slide presentations

#+begin_src emacs-lisp :tangle yes
(use-package ox-beamer
  :after ox
  :straight (:type built-in)
  :delight
  (org-beamer-mode nil)
  :general
  (:states '(normal visual)
   :keymaps 'org-beamer-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "m b" '(:ignore t :wk "beamer")
   "m b e" #'org-beamer-select-environment
   "m b p" #'org-beamer-export-to-pdf)
  :custom
  (org-beamer-environments-extra
   '(("onlyenv" "O" "\\begin{onlyenv}%a" "\\end{onlyenv}")
     ("minipage" "m" "\\begin{minipage}[%R]{%O}" "\\end{minipage}%"))))
#+end_src

*** Babel

Now, some configurations relating org-babel and its magic source blocks.

#+begin_src emacs-lisp :tangle yes
(use-package ob
  :after org
  :straight (:type built-in)
  :delight
  (org-src-mode)
  :preface
  (defun org-babel-tangle-block ()
    (interactive)
    (let ((current-prefix-arg '(4)))
      (call-interactively #'org-babel-tangle)))
  (defun org-babel-strip-ansi-codes (func &rest args)
    (let ((result (apply func args)))
      (unless (null result)
        (replace-regexp-in-string ansi-color-control-seq-regexp "" result))))
  (defun org-babel-region-strip-ansi-codes (func beg &rest args)
    "Remove all ansi-color codes from point (the end of the region) to `beg'."
    (while (re-search-forward ansi-color-control-seq-regexp beg t -1)
      (replace-match "" nil nil))
    (apply func beg args))
  :hook
  (org-babel-after-execute-hook . org-redisplay-inline-images)
  :init
  (advice-add 'org-trim :around #'org-babel-strip-ansi-codes)
  (advice-add 'org-no-properties :around #'org-babel-strip-ansi-codes)
  (advice-add 'org-element-normalize-string  :around #'org-babel-strip-ansi-codes)
  (advice-add 'org-babel-examplify-region :around #'org-babel-region-strip-ansi-codes)
  (advice-add 'org-string-nw-p :around #'org-babel-strip-ansi-codes)
  (advice-add 'org-element-interpret-data :around #'org-babel-strip-ansi-codes)
  :custom
  (org-edit-src-content-indentation 0)
  (org-edit-src-persistent-message nil)
  (org-src-preserve-indentation t)
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-src-window-setup 'split-window-below)
  (org-babel-default-header-args
   '((:session . "none")
     (:results . "value replace")
     (:exports . "code")
     (:cache . "none")
     (:noweb . "no")
     (:eval . "never-export")
     (:hlines . "no")
     (:tangle . "no")))
  (org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)
     ;; (julia . t)
     (makefile . t)
     (R . t)
     (C . t)
     (ruby . t)
     (ditaa . t)
     (dot . t)
     (octave . t)
     (sqlite . t)
     (perl . t)
     (screen . t)
     (plantuml . t)
     (lilypond . t)
     (latex . t)
     ;; (jupyter . t)
     ))
  :general
  (:states '(normal visual)
   :keymaps 'org-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "m x" #'org-babel-execute-buffer
   "m z" #'org-babel-tangle-block
   "m Z" #'org-babel-tangle)
  (:keymaps 'org-mode-map
   "C-c SPC" #'org-edit-special)
  (:keymaps 'org-src-mode-map
   "C-c SPC" #'org-edit-src-exit)
  :config
  (setf (alist-get "dot" org-src-lang-modes) 'graphviz-dot
        (alist-get "latex" org-src-lang-modes) 'TeX-latex))
#+end_src

**** =jupyter=

As a great way to run Python and Julia source blocks inside =org-mode=

#+begin_src emacs-lisp :tangle yes
(use-package jupyter
  :after ob
  :straight t
  :straight zmq
  :straight websocket
  :commands jupyter-org-interaction-mode
  :custom
  (org-babel-default-header-args:jupyter-julia
   '((:eval . "no-export")
     (:async . "yes")
     (:session . "*Julia*")
     (:results . "value")
     (:exports . "both")
     (:kernel . "julia-1.4")))
  (org-babel-default-header-args:jupyter-python
   '((:eval . "no-export")
     (:async . "yes")
     (:session . "*Python*")
     (:results . "value")
     (:exports . "both")
     (:kernel . "python3"))))
#+end_src

** C-like languages

Here I set some defaults I appreciate for =cc-mode= (the mode for all
c-like languages):

#+begin_src emacs-lisp :tangle yes
(use-package cc-mode
  :defer t
  :straight (:type built-in)
  :commands (c-mode awk-mode java-mode c++-mode)
  :mode
  (("\\.c\\'"    . c-mode)
   ("\\.h\\'"    . c-mode)
   ("\\.awk\\'"  . awk-mode)
   ("\\.java\\'" . java-mode))
  :hook
  ((c-mode-common-hook . lsp)
   (c-mode-common-hook . rainbow-delimiters-mode)
   (c-mode-common-hook . yas-minor-mode)
   (c-mode-common-hook . smartparens-strict-mode))
  :custom
  (c-default-style
   '((java-mode . "java")
     (awk-mode  . "awk")
     (other     . "linux")))
  (c-basic-offset 4)
  (c-offsets-alist '((substatement-open . 0)))
  (lsp-clients-clangd-args
   '("--header-insertion-decorators=0"
     "--pch-storage=memory"
     "--header-insertion=never"
     "--background-index"
     "--completion-style=bundled")))
#+end_src

As languages that are part of =cc-mode= are known to using a lot of
doxygen, here's a package that highlights it!

#+begin_src emacs-lisp :tangle yes
(use-package highlight-doxygen
  :defer t
  :straight t
  :hook
  (c-mode-common-hook . highlight-doxygen-mode)
  :custom-face
  (highlight-doxygen-comment ((t :inherit font-lock-doc-face :background "#363230" :extend t)))
  (highlight-doxygen-code-block ((t :background "#363230" :extend t))))
#+end_src

*** C/C++

Better C++ font lock

#+begin_src emacs-lisp :tangle yes
(use-package modern-cpp-font-lock
  :defer t
  :straight t
  :delight
  (modern-c++-font-lock-mode)
  :hook
  (c++-mode-hook . modern-c++-font-lock-mode))
#+end_src

And better pre-processor highlighting

#+begin_src emacs-lisp :tangle yes
(use-package preproc-font-lock
  :defer t
  :straight t
  :commands (preproc-font-lock-mode preproc-font-lock-global-mode)
  :hook
  ((c-mode-hook . preproc-font-lock-mode)
   (c++-mode-hook . preproc-font-lock-mode))
  :custom-face
  (preproc-font-lock-preprocessor-background ((t :background "#302c2b"))))
#+end_src

In the department of code formatting, =clang-format= is a lovely tool
that can really be of great use while editing C and C++ code.

#+begin_src emacs-lisp :tangle yes
(use-package clang-format
  :defer t
  :straight t
  :preface
  (defun cc-format-on-save-hook ()
    (when c-buffer-is-cc-mode
      (clang-format-buffer)))
  :general
  (:states '(normal visual)
   :keymaps 'c-mode-base-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "m f" #'clang-format-region)
  :custom
  (clang-format-fallback-style "webkit")
  :config
  ;; crux-with-region-or-buffer ...
  (defadvice clang-format-region
      (before with-region-or-buffer activate compile)
    (interactive
     (if mark-active
         (list
          (region-beginning)
          (region-end))
       (list
        (point-min)
        (point-max))))))
#+end_src

*** CUDA

Suporting CUDA syntax per-se is kinda easy, as it's a subset of C after
all. The thing is I want proper syntax highlighting for all those
special keywords and types that CUDA introduces. So, let's install
=cuda-mode=:

#+begin_src emacs-lisp :tangle yes
(use-package cuda-mode
  :defer t
  :straight t
  :mode "\\.cu\\'"
  :commands cuda
  :hook
  (cuda-mode-hook . (lambda () (dolist (func c++-mode-hook nil) (funcall func))))
  :custom
  (cuda-font-lock-keywords 'cuda-font-lock-keywords-3))
#+end_src

It falls back on =c++-mode= by default, so we are safe here.

** R

For R you pretty much /need/ the =ess= package, i.e. /Emacs Speaks
Statistics/. It provides you with everything you need from R.

#+begin_src emacs-lisp :tangle yes
(use-package ess-r-mode
  :defer t
  :straight ess
  :commands (R R-mode r-mode ess-r-mode ess-r-transcript-mode)
  :preface
  (defun hcps/insert-r-pipe ()
    "Lets us insert the magrittr piping operator %>% in R"
    (interactive)
    (just-one-space 1)
    (insert "%>%")
    (reindent-then-newline-and-indent))
  :hook
  ((ess-r-mode-hook . yas-minor-mode)
   (ess-r-mode-hook . aggressive-indent-mode)
   (ess-r-mode-hook . smartparens-strict-mode)
   (ess-r-mode-hook . eldoc-mode)
   (ess-r-mode-hook . rainbow-delimiters-mode)
   (inferior-ess-mode-hook . comint-fix-window-size))
  :general
  (:states 'insert
   :keymaps 'ess-r-mode-map
   "M-RET" #'hcps/insert-r-pipe
   "<tab>" #'ess-indent-or-complete)
  (:states '(normal visual)
   :keymaps 'ess-r-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "m c"  #'ess-eval-region-or-function-or-paragraph-and-step
   "m r"  #'ess-eval-region)
  (:states 'normal
   :keymaps 'ess-r-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "m e"  #'Rd-mode-insert-skeleton
   "m f"  #'Rd-font
   "m j"  #'Rd-mode-insert-item
   "m n"  #'ess-eval-line-visibly-and-step
   "m p"  #'Rd-preview-help
   "m s"  #'Rd-mode-insert-section
   "m v"  #'ess-display-help-on-object
   "m w"  #'ess-switch-process
   "m y"  #'ess-switch-to-ESS
   "m z"  #'ess-switch-to-end-of-ESS)
  :custom
  (ido-enable-flex-matching t)
  (ess-auto-width 'frame)
  (ess-style 'RStudio))
#+end_src

** Shell script

As for shell-scripting:

#+begin_src emacs-lisp :tangle yes
(use-package sh-script
  :defer t
  :straight (:type built-in)
  :commands (shell-script-mode sh-mode)
  :mode ("\\.zsh\\'" . shell-script-mode)
  :preface
  (defconst more-sh-utilities
    '("addbib" "apropos" "ar" "at" "awk" "banner" "basename" "batch" "biff"
      "cal" "calendar" "cancel" "cat" "cb" "cc" "checkeq" "checknr" "chgrp"
      "chmod" "chown" "chroot" "clear" "cmp" "colcrt" "comm" "compress" "cp"
      "cpio" "cpp" "csh" "ctags" "cut" "date" "dbx" "dd" "deroff" "df" "diff"
      "dirname" "du" "e" "ed" "edit" "env" "eqn" "ex" "expand" "expr" "file"
      "find" "finger" "fmt" "fold" "ftp" "git" "gprof" "grep" "groups" "head"
      "hostname" "indent" "install" "join" "last" "ld" "leave" "less" "lex"
      "lint" "ln" "login" "look" "lookbib" "lorder" "lp" "lpq" "lpr" "lprm"
      "ls" "mail" "make" "man" "mesg" "mkdir" "mkfifo" "mkstr" "more" "mv"
      "neqn" "nice" "nm" "nroff" "od" "page" "passwd" "paste" "pgrep" "pkill"
      "pr" "prof" "ps" "ranlib" "rcp" "rev" "rlogin" "rm" "rmdir" "roffbib"
      "rsh" "rup" "ruptime" "rusers" "rwall" "rwho" "sccs" "script" "sed" "seq"
      "sh" "size" "sleep" "sort" "sortbib" "spell" "split" "strings" "strip"
      "stty" "su" "sudo" "tabs" "tac" "tail" "talk" "tar" "tbl" "tee" "telnet"
      "tftp" "time" "timeout" "touch" "tr" "troff" "tsort" "tty" "ul" "uname"
      "uncompress" "unexpand" "uniq" "units" "unlink" "uptime" "users" "uucp"
      "vacation" "vedit" "vi" "view" "w" "wall" "wc" "whatis" "whereis" "which"
      "who" "whoami" "write" "xargs" "xstr" "yacc" "yes" "zcat" "gawk" "curl"
      "ip")
    "A list of common shell commands to be fontified especially in `sh-mode'.")
  (defconst more-sh-builtins
    '("alias" "bg" "bind" "break" "builtin" "caller" "cd"
      "command" "compgen" "complete" "compopt" "continue" "declare" "dirs"
      "disown" "echo" "enable" "eval" "exec" "exit" "export" "false" "fc" "fg"
      "getopts" "hash" "help" "history" "jobs" "kill" "let" "local" "logout"
      "mapfile" "popd" "printf" "pushd" "pwd" "read" "readarray" "readonly"
      "return" "set" "shift" "shopt" "source" "suspend" "test" "times" "trap"
      "true" "type" "typeset" "ulimit" "umask" "unalias" "unset" "wait")
    "Actual list of common keywords and builtins in `sh-mode'.")
  (defconst prezto-files
    '(".zlogin" ".zlogin" ".zlogout" ".zpreztorc" ".zprofile" ".zshenv" ".zshrc")
    "Files that are too zsh-style files.")
  (defun zsh-prezto-files ()
    "Function to ease switching to zsh when dealing with a zsh file."
    (if (and buffer-file-name
             (member (file-name-nondirectory buffer-file-name) prezto-files))
        (sh-set-shell "zsh")))
  (defun sh--match-variables-in-quotes (limit)
    "Search for variables in double-quoted strings bounded by LIMIT."
    (with-syntax-table sh-mode-syntax-table
      (let (res)
        (while (and
                (setq res (re-search-forward
                           "[^\\]\\(\\$\\)\\({.+?}\\|\\<[a-zA-Z0-9_]+\\|[@*#!]\\)"
                           limit t))
                (not (eq (nth 3 (syntax-ppss)) ?\"))))
        res)))
  (defun sh--match-command-subst-in-quotes (limit)
    "Search for a command in double-quoted strings bounded by LIMIT."
    (with-syntax-table sh-mode-syntax-table
      (let (res)
        (while (and
                (setq res (re-search-forward
                           "[^\\]\\(\\$(.+?)\\|`.+?`\\)"
                           limit t))
                (not (eq (nth 3 (syntax-ppss)) ?\"))))
        res)))
  :hook
  ((sh-mode-hook . zsh-prezto-files)
   (sh-mode-hook . yas-minor-mode)
   (sh-mode-hook . aggressive-indent-mode)
   (sh-mode-hook . smartparens-mode)
   (sh-mode-hook . rainbow-delimiters-mode))
  :config
  (font-lock-add-keywords
   'sh-mode `((sh--match-variables-in-quotes
               (1 'default prepend)
               (2 'font-lock-variable-name-face prepend))
              (sh--match-command-subst-in-quotes
               (1 'sh-quoted-exec prepend))
              ("[^\\]\\([|&]\\{1,2\\}\\|[0-9]?[<>]\\{1,3\\}&?[0-9-]?\\|;\\{1,2\\}\\)"
               (1 'font-lock-keyword-face append))
              ;; ("\\(?:^\\|;\\)[^(]*[^\\]\\()\\)"
              ;;  (1 'font-lock-keyword-face append))
              (,(concat
                 "\\(?:^\\|[$<>](\\|||\\|&&\\|[;|]\\)"
                 "[[:blank:]]*"
                 "\\(?:while\\|for\\|if\\)?"
                 "[[:blank:]]*"
                 "\\(?:[[:alpha:]_]+=\\(?:[\"'][[:ascii:]]*?[\"']\\|[^[:blank:];&|\\$()]*?\\)?[[:blank:]]*\\)*"
                 (regexp-opt (append more-sh-builtins more-sh-utilities) 'words))
               (1 'font-lock-builtin-face append)))))
#+end_src

For =shell= completion I use =bash-complete=, which auto completes several
=bash= functions.

#+begin_src emacs-lisp :tangle yes
(use-package bash-completion
  :defer t
  :straight t
  :hook
  (shell-dynamic-complete-functions . bash-completion-dynamic-complete)
  :custom
  (bash-completion-use-separate-processes t))
#+end_src

** Makefile

In Makefile files we have a special case: it /needs/ tabulators to work.
So, we'll set that up.

#+begin_src emacs-lisp :tangle yes
(use-package make-mode
  :defer t
  :straight (:type built-in)
  :commands makefile-mode
  :mode ("^[Mm]akefile\\'" . makefile-mode)
  :preface
  (defun makefile-mode-defaults ()
    "Turn on tabs only for make-mode."
    (whitespace-toggle-options '(tabs))
    (setq-local indent-tabs-mode t))
  :hook
  ((makefile-mode-hook . makefile-mode-defaults)
   (makefile-mode-hook . smartparens-strict-mode)
   (makefile-mode-hook . rainbow-delimiters-mode)))
#+end_src

** PlantUML

/PlantUML/ is a graph language that describes loads of different diagram
types, mainly focusing on /UML/, of course.

#+begin_src emacs-lisp :tangle yes
(use-package plantuml-mode
  :defer t
  :straight t
  :mode "\\.plantuml\\'"
  :interpreter "plantuml")
#+end_src

** Lisp

Fix for the annoying keyword default indentation:

#+begin_src emacs-lisp :tangle yes
(use-package lisp-mode
  :defer t
  :straight (:type built-in)
  :straight lisp-extra-font-lock
  :mode
  (("\\.lsp\\'" . lisp-mode)
   ("\\.lisp\\'" . lisp-mode)
   ("\\.cl\\'" . lisp-mode))
  :preface
  (defun fuco1/lisp-indent-function (indent-point state)
    "This function is the normal value of the variable `lisp-indent-function'.
The function `calculate-lisp-indent' calls this to determine
if the arguments of a Lisp function call should be indented specially.
INDENT-POINT is the position at which the line being indented begins.
Point is located at the point to indent under (for default indentation);
STATE is the `parse-partial-sexp' state for that position.
If the current line is in a call to a Lisp function that has a non-nil
property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
it specifies how to indent.  The property value can be:
,* `defun', meaning indent `defun'-style
  (this is also the case if there is no property and the function
  has a name that begins with \"def\", and three or more arguments);
,* an integer N, meaning indent the first N arguments specially
  (like ordinary function arguments), and then indent any further
  arguments like a body;
,* a function to call that returns the indentation (or nil).
  `lisp-indent-function' calls this function with the same two arguments
  that it itself received.
This function returns either the indentation to use, or nil if the
Lisp function does not specify a special indentation."
    (let ((normal-indent (current-column))
          (orig-point (point)))
      (goto-char (1+ (elt state 1)))
      (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
      (cond
       ;; car of form doesn't seem to be a symbol, or is a keyword
       ((and (elt state 2)
             (or (not (looking-at "\\sw\\|\\s_"))
                 (looking-at ":")))
        (if (not (> (save-excursion (forward-line 1) (point))
                    calculate-lisp-indent-last-sexp))
            (progn (goto-char calculate-lisp-indent-last-sexp)
                   (beginning-of-line)
                   (parse-partial-sexp (point)
                                       calculate-lisp-indent-last-sexp 0 t)))
        ;; Indent under the list or under the first sexp on the same
        ;; line as calculate-lisp-indent-last-sexp.  Note that first
        ;; thing on that line has to be complete sexp since we are
        ;; inside the innermost containing sexp.
        (backward-prefix-chars)
        (current-column))
       ((and (save-excursion
               (goto-char indent-point)
               (skip-syntax-forward " ")
               (not (looking-at ":")))
             (save-excursion
               (goto-char orig-point)
               (looking-at ":")))
        (save-excursion
          (goto-char (+ 2 (elt state 1)))
          (current-column)))
       (t
        (let ((function (buffer-substring (point)
                                          (progn (forward-sexp 1) (point))))
              method)
          (setq method (or (function-get (intern-soft function)
                                         'lisp-indent-function)
                           (get (intern-soft function) 'lisp-indent-hook)))
          (cond ((or (eq method 'defun)
                     (and (null method)
                          (> (length function) 3)
                          (string-match "\\`def" function)))
                 (lisp-indent-defform state indent-point))
                ((integerp method)
                 (lisp-indent-specform method state
                                       indent-point normal-indent))
                (method
                 (funcall method indent-point state))))))))
  :hook
  ((lisp-mode-hook . smartparens-strict-mode)
   (lisp-mode-hook . aggressive-indent-mode)
   (lisp-mode-hook . rainbow-delimiters-mode))
  :custom
  (lisp-indent-function #'fuco1/lisp-indent-function)
  :config
  (require 'lisp-extra-font-lock)
  (lisp-extra-font-lock-global-mode 1))
#+end_src

** Elisp

Emacs version!

#+begin_src emacs-lisp :tangle yes
(use-package elisp-mode
  :defer t
  :straight (:type built-in)
  :straight elisp-slime-nav
  :commands emacs-lisp-mode
  :mode ("\\.el" . emacs-lisp-mode)
  :preface
  (defun recompile-elc-on-save ()
    "Recompile your elc when saving an elisp file."
    (when (and (string-prefix-p user-emacs-directory (file-truename buffer-file-name))
               (file-exists-p (byte-compile-dest-file buffer-file-name)))
      (emacs-lisp-byte-compile)))
  :hook
  ((after-save-hook . recompile-elc-on-save)
   (emacs-lisp-mode-hook . smartparens-strict-mode)
   (emacs-lisp-mode-hook . aggressive-indent-mode)
   (emacs-lisp-mode-hook . rainbow-delimiters-mode)
   (emacs-lisp-mode-hook . yas-minor-mode))
  :config
  (require 'use-package))
#+end_src

** Python

#+begin_quote
Elpy is an Emacs package to bring powerful Python editing to Emacs. It
combines and configures a number of other packages, both written in
Emacs Lisp as well as Python.
#+end_quote

#+begin_src emacs-lisp :tangle yes
(use-package elpy
  :defer t
  :straight t
  :delight
  (elpy-mode " elpy")
  :commands elpy-enable
  :hook
  ((python-mode-hook . elpy-enable)
   (python-mode-hook . yas-minor-mode)
   (python-mode-hook . smartparens-strict-mode))
  :custom
  (elpy-modules
   '(elpy-module-sane-defaults
     elpy-module-eldoc
     elpy-module-yasnippet))
  :general
  (:states '(normal visual)
   :keymaps 'python-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "i" #'elpy-format-code))
#+end_src

** CMake

As CMake is very simple, each word carries a load of meaning and
importance. This little mode colors them accordingly.

#+begin_src emacs-lisp :tangle yes
(use-package cmake-mode
  :defer t
  :straight cmake-font-lock
  :load-path (lambda () (car (file-expand-wildcards "/usr/share/cmake-3.*/editors/emacs")))
  :mode
  (("^CMakeLists\\.txt\\'" . cmake-mode)
   ("\\.cmake\\'" . cmake-mode))
  :init
  (autoload 'cmake-font-lock-activate "cmake-font-lock" nil t)
  :hook
  ((cmake-mode-hook . smartparens-strict-mode)
   (cmake-mode-hook . yas-minor-mode)
   (cmake-mode-hook . rainbow-delimiters-mode)
   (cmake-mode-hook . cmake-font-lock-activate)))
#+end_src

** Dockerfile

=dockerfile-mode= adds support to syntax highlighting and to build the
image directly from the buffer using =C-c C-b=.

#+begin_src emacs-lisp :tangle yes
(use-package dockerfile-mode
  :defer t
  :straight t
  :mode "Dockerfile\\'")
#+end_src

** GMPL

So I have syntax highlighting while editing GLPK files.

#+begin_src emacs-lisp :tangle yes
(use-package gmpl-mode
  :defer t
  :straight t
  :mode "\\.mod\\'")
#+end_src

** Julia

Packages to write Julia source code in Emacs.

#+begin_src emacs-lisp :tangle yes
(use-package julia-mode
  :defer t
  :straight t
  :mode "\\.jl\\'"
  :preface
  (defun hcps/insert-julia-pipe ()
    "Lets us insert the piping operator |> in Julia"
    (interactive)
    (just-one-space 1)
    (insert "|>")
    (reindent-then-newline-and-indent))
  :init
  (setq inferior-julia-program (hcps/s-trim-right (shell-command-to-string "which julia")))
  (defvaralias 'inferior-julia-program-name 'inferior-julia-program
    "Because jupyter still uses this symbol.")
  (advice-add 'julia :around (lambda (func &rest args) (set-buffer (apply func args))))
  :hook
  ((julia-mode-hook . lsp)
   (julia-mode-hook . smartparens-strict-mode)
   (julia-mode-hook . rainbow-delimiters-mode)
   (julia-mode-hook . aggressive-indent-mode))
  :general
  (:states 'insert
   :keymaps 'julia-mode-map
   "M-RET" #'hcps/insert-julia-pipe))
#+end_src

** LaTeX

- [ ] [[https://github.com/jwiegley/use-package/issues/379#issuecomment-258217014][Interesting link]]

Let's start with some basic =AUCTeX= configuration

#+begin_src emacs-lisp :tangle yes
(use-package tex
  :defer t
  :straight
  (auctex
   :type git
   :host nil
   :files (:defaults (:exclude "*.el.in"))
   :repo "https://git.savannah.gnu.org/git/auctex.git"
   :branch "master"
   :pre-build
   (("./autogen.sh")
    ("./configure" "--without-texmf-dir" "--with-lispdir=.")
    ("make"))
   :build
   (:not info))
  :mode ("\\.tex\\'" . TeX-latex-mode)
  :commands (TeX LaTeX LaTeX-mode TeX-mode TeX-latex-mode)
  :hook
  ((LaTeX-mode-hook . auto-fill-mode)
   (LaTeX-mode-hook . rainbow-delimiters-mode)
   (LaTeX-mode-hook . smartparens-mode))
  :init
  (setq reftex-plug-into-AUCTeX t)
  :general
  (:states '(normal visual)
   :keymaps 'LaTeX-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "m e" #'LaTeX-environment
   "m s" #'LaTeX-section
   "m m" #'TeX-insert-macro)
  :custom
  ;; (TeX-auto-save t)
  ;; (TeX-master nil)
  (TeX-parse-self t)
  (TeX-save-query nil)
  (TeX-source-correlate-method 'synctex))
#+end_src

And =RefTeX= to follow it

#+begin_src emacs-lisp :tangle yes
(use-package reftex
  :defer t
  :straight (:type built-in)
  :delight (reftex-mode " ref")
  :commands (reftex-mode turn-on-reftex)
  :hook
  (LaTeX-mode-hook . turn-on-reftex)
  :general
  (:states '(normal visual)
   :keymaps 'LaTeX-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "m b" #'reftex-label
   "m r" #'reftex-reference
   "m c" #'reftex-citation
   "m t" #'reftex-toc
   "m i" #'reftex-index)
  :custom
  (reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource")))
#+end_src

So, for my LaTeX config I'll mainly use =latexmk= as it's way simpler to
use.

#+begin_src emacs-lisp :tangle yes
(use-package auctex-latexmk
  :disabled
  :after tex
  :straight t
  :custom
  (auctex-latexmk-inherit-TeX-PDF-mode t)
  :config
  (auctex-latexmk-setup))
#+end_src

The hook stuff is because all =TeX= get defined when the mode starts, so
we need to redefine them then.

** Meson

Syntax support for the Meson build system DSL (which is based from
Python).

#+begin_src emacs-lisp :tangle yes
(use-package meson-mode
  :defer t
  :straight t
  :commands meson
  :mode "^meson\\.build\\'"
  :hook
  ((meson-mode-hook . rainbow-delimiters-mode)
   (meson-mode-hook . smartparens-mode)))
#+end_src

** {bspwm,sxhkd}rc

Derives from =conf-mode[space]=. Got it from [[https://notabug.org/arkhan/emacs-bspwm][here]].

#+begin_src emacs-lisp :tangle yes
(use-package bspwm
  :defer t
  :straight nil
  :commands bspwm-config-mode
  :load-path (lambda () (expand-file-name "bspwm-mode" vendor-user-dir))
  :mode
  ("sxhkdrc\\'\\|bspwmrc\\'" . bspwm-config-mode)
  ;; :hook
  ;; (bspwm-config-mode-hook . page-break-lines-mode)
)
#+end_src

** Configuration files

Just a little hook to start the desired =conf-mode= when we open these
files.

#+begin_src emacs-lisp :tangle yes
(use-package conf-mode
  :defer t
  :straight (:type built-in)
  :mode "\\.service\\'"
  :hook
  ((conf-mode-hook . (lambda () (run-hooks 'prog-mode-hook)))
   (conf-mode-hook . smartparens-strict-mode)))
#+end_src

** Rust

The newest greatest compiled language!

#+begin_src emacs-lisp :tangle yes
(use-package rust-mode
  :defer t
  :straight t
  :straight cargo
  ;; :straight flycheck-rust
  :hook
  ((rust-mode-hook . lsp)
   (rust-mode-hook . cargo-minor-mode)
   (rust-mode-hook . smartparens-strict-mode)
   (rust-mode-hook . rainbow-delimiters-mode))
  :custom
  (rust-format-on-save t)
  (rust-indent-method-chain t))
#+end_src

** Perl

Old language, still great for doing admin stuff in few lines.

#+begin_src emacs-lisp :tangle yes
(use-package cperl-mode
  :defer t
  :straight (:type built-in)
  :mode "\\.p[lm]\\'"
  :interpreter "perl"
  :preface
  :hook
  ((cperl-mode-hook . rainbow-delimiters-mode)
   (cperl-mode-hook . aggressive-indent-mode)
   (cperl-mode-hook . smartparens-mode)
   (cperl-mode-hook . lsp))
  :custom
  (cperl-auto-newline nil)
  (cperl-electric-parens-mark nil)
  (cperl-electric-parens nil)
  (cperl-electric-parens-string "")
  (cperl-electric-keywords nil)
  (cperl-electric-linefeed nil)
  (cperl-electric-lbrace-space nil)
  (cperl-message-electric-keyword nil)
  (cperl-indent-region-fix-constructs 1)
  (cperl-extra-newline-before-brace nil)
  (cperl-indent-level 4)
  (cperl-brace-offset 0)
  (cperl-continued-brace-offset -4)
  (cperl-label-offset -4)
  (cperl-continued-statement-offset 4)
  :general
  (:states '(normal visual)
   :keymaps 'cperl-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "i" #'cperl-indent-region)
  (:keymaps 'cperl-mode-map
   "{" nil)
  :config
  ;; crux-with-region-or-buffer
  (defadvice cperl-indent-region
      (before with-region-or-buffer activate compile)
    (interactive
     (if mark-active
         (list
          (region-beginning)
          (region-end))
       (list
        (point-min)
        (point-max)))))
  (font-lock-add-keywords
   'cperl-mode `(("^#!\\/\\(?:\\w+\\/\\)*\\(\\w+\\)"
                  (1 'font-lock-keyword-face prepend)))))
#+end_src

** Dot (Graphviz)

Diagrams are cool

#+begin_src emacs-lisp :tangle yes
(use-package graphviz-dot-mode
  :defer t
  :straight t
  :mode "\\.gv\\'\\|\\.dot\\'"
  :commands (graphviz-dot-mode)
  :hook
  ((graphviz-dot-mode-hook . smartparens-mode)
   (graphviz-dot-mode-hook . rainbow-delimiters-mode)
   (graphviz-dot-mode-hook . aggressive-indent-mode))
  :general
  (:states '(normal visual)
   :keymaps 'graphviz-dot-mode-map
   :prefix hcps/leader-key
   :non-normal-prefix hcps/alt-leader-key
   "m f" #'graphviz-dot-indent-graph
   "m p" #'graphviz-dot-preview)
  :custom
  (graphviz-dot-indent-width 4))
#+end_src

** Bison/Flex/Yacc

For lexer shenanigans

#+begin_src emacs-lisp :tangle yes
(use-package bison
  :defer t
  :straight nil
  :commands bison-mode
  :load-path (lambda () (expand-file-name "bison-mode" vendor-user-dir))
  :mode
  (("\\.y\\'" . bison-mode)
   ;; ("\\.l\\'" . flex-mode)
   ;; ("\\.jison\\'" . jison-mode)
   )
  :hook
  ((bison-mode-hook . smartparens-strict-mode)
   (bison-mode-hook . rainbow-delimiters-mode))
  ;; :custom
  ;; (bison-all-electricity-off t)
  ;; (bison-rule-separator-column 0)
  ;; (bison-rule-enumeration-column 0)
  ;; (bison-decl-type-column 0)
  ;; (bison-decl-token-column 0)
  )
#+end_src

** Markdown

Ugh another mode that insists in putting bigger fonts everywhere...

#+begin_src emacs-lisp :tangle yes
(use-package markdown-mode
  :defer t
  :straight t
  :mode "\\.md\\'"
  :commands (markdown-mode)
  :hook
  ((markdown-mode-hook . auto-fill-mode)
   (markdown-mode-hook . hes-mode)
   (markdown-mode-hook . yas-minor-mode)
   (markdown-mode-hook . eldoc-mode)
   (markdown-mode-hook . visual-line-mode)
   (markdown-mode-hook . (lambda () (whitespace-toggle-options 'lines-tail))))
  :custom-face
  (markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold))))
  (markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.0))))
  (markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.0))))
  (markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.0)))))
#+end_src

** PKGBUILD

The shell scripts responsible for AUR package's configuration. This
package offers additional features and commands on top of just being a
=shell-script-mode= wrap.

#+begin_src emacs-lisp :tangle yes
(use-package pkgbuild-mode
  :defer t
  :straight t
  :mode "PKGBUILD\\'"
  :commands (pkgbuild-mode))
#+end_src

No hooks are needed as this mode derives from =shell-script-mode=.
